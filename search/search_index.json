{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AsyncSpotify \u00b6 Documentation \u00b6 The full documentation can be viewed here . Why should you use this library \u00b6 100% Code coverage Completely type annotated Completely async Scales up to (theoretically) unlimited requests per second (tested with 1000 simultaneous requests which lead to a 429) Customize the timeout, maximal simultaneous request Throws custom errors, so you can catch different errors easily Token expiration Rate limit violation An invalid album id Gets rid of the client credential workflow if you provide spotify cookies Good for automated testing Offers a hook which gets called if the token expires, so you can automatically update the token Installation \u00b6 You need at least python3.6 to install the package pip install async-spotify Example \u00b6 For more in depth examples take a look here or visit the documentation. from async_spotify import SpotifyApiClient from async_spotify.authentification import SpotifyAuthorisationToken from async_spotify.authentification.authorization_flows import AuthorizationCodeFlow # Create a auth_code_flow object and load the auth_code_flow from env variables auth_flow = AuthorizationCodeFlow () auth_flow . load_from_env () # Create a new Api client and pass the auth_code_flow api = SpotifyApiClient ( auth_flow , hold_authentication = True ) # Get the auth token with your code code : str = \"Your Spotify Code\" auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) # Create a new client await api . create_new_client ( request_limit = 1500 ) # Start making queries with the internally saved token album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' ) # If you pass a valid auth_token this auth_token will be used for making the requests album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' , auth_token ) Tests \u00b6 See here .","title":"Overview"},{"location":"#asyncspotify","text":"","title":"AsyncSpotify"},{"location":"#documentation","text":"The full documentation can be viewed here .","title":"Documentation"},{"location":"#why-should-you-use-this-library","text":"100% Code coverage Completely type annotated Completely async Scales up to (theoretically) unlimited requests per second (tested with 1000 simultaneous requests which lead to a 429) Customize the timeout, maximal simultaneous request Throws custom errors, so you can catch different errors easily Token expiration Rate limit violation An invalid album id Gets rid of the client credential workflow if you provide spotify cookies Good for automated testing Offers a hook which gets called if the token expires, so you can automatically update the token","title":"Why should you use this library"},{"location":"#installation","text":"You need at least python3.6 to install the package pip install async-spotify","title":"Installation"},{"location":"#example","text":"For more in depth examples take a look here or visit the documentation. from async_spotify import SpotifyApiClient from async_spotify.authentification import SpotifyAuthorisationToken from async_spotify.authentification.authorization_flows import AuthorizationCodeFlow # Create a auth_code_flow object and load the auth_code_flow from env variables auth_flow = AuthorizationCodeFlow () auth_flow . load_from_env () # Create a new Api client and pass the auth_code_flow api = SpotifyApiClient ( auth_flow , hold_authentication = True ) # Get the auth token with your code code : str = \"Your Spotify Code\" auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) # Create a new client await api . create_new_client ( request_limit = 1500 ) # Start making queries with the internally saved token album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' ) # If you pass a valid auth_token this auth_token will be used for making the requests album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' , auth_token )","title":"Example"},{"location":"#tests","text":"See here .","title":"Tests"},{"location":"EXAMPLES/","text":"Examples \u00b6 Getting started \u00b6 If you want to start connecting to the spotify api you have to create a new instance of one of the AuthorizationCodeFlows. Currently onle the AuthorizationCodeFlow and ClientCredentialsFlow are supported. These AuthorizationCodeFlow hold all sorts of configurations. from async_spotify.authentification.authorization_flows import AuthorizationCodeFlow auth_flow = AuthorizationCodeFlow ( application_id = 'Your id' , application_secret = 'Your secret' , scopes = [ 'your' , 'scopes' ], redirect_url = 'your.redirect.url' ) # You can also load the auth_code_flow from environment variables. # If the variable does not exist the existing value will not be overwritten. auth_flow . load_from_env () These created auth_flow have to be passed to the SpotifyApiClient . # Create new client api_client = SpotifyApiClient ( auth_flow ) Authorization Code Flow \u00b6 To get a code from Spotify the user has to agree to the scopes your app asks for. For this you create an authorization, let the user visit this url and read the code parameter in the spotify redirect. # Build the authorization url for the users authorization_url : str = api_client . build_authorization_url ( show_dialog = True ) If you have some questions about this process read this spotify article about it. We will assume that you managed to get a code from spotify for a specific user. Now we have to exchange the code for an authorization token, and a refresh token. # Exchange the code for the tokens auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) After we recieved the auth_token we can start making request. But before we make this we have to create a new client which will be internally used for all the request making. # Create a new client which will handle the request await api_client . create_new_client () # Get information about an album album = await api_client . albums . get_one ( album_id , market = 'DE' , auth_token = auth_token ) # ... Important If you want to shut down your application and don't want to leak requests you have to call the close_client method of the api_client . # Close the client await api_client . close_client () Client Credentials Flow \u00b6 In this case you only have to pass your auth_flow to your SpotifyApiClient and call the get_auth_token_with_client_credentials method. If you have some questions about this process read this potify article about it. # Create a auth flow (this time a ClientCredentialsFlow) auth_flow = ClientCredentialsFlow () auth_flow . load_from_env () # Pass it to the spotify client api_client = SpotifyApiClient ( auth_flow ) # Get the token from spotify await api_client . get_auth_token_with_client_credentials () # And start making requests await api . create_new_client () After we recieved the auth_token we can start making request. # Create a new client which will handle the request await api_client . create_new_client () # Get information about an album album = await api_client . albums . get_one ( album_id , market = 'DE' , auth_token = auth_token ) # ... Important If you want to shut down your application and don't want to leak requests you have to call the close_client method of the api_client . # Close the client await api_client . close_client () Endpoints \u00b6 Every Api Endpoint is represented as an instance variables of the SpotifyApiClient . Look here for every instance variable and the associated classes. # For the albums endpoint api_client . albums . whatever () # For the artist endpoint api_client . artist . whatever () Advanced Configuration \u00b6 If you don't want to pass the auth_token every time you make a request you can instruct the SpotifyApiClient to keep the token in memory. Every time you refresh the token the in memory token will be updated too. So you always have a valid token you can make requests with. If the token expires you will still have to refresh it yourself by calling the refresh_token method, which will returned the updated token. You don't have to pass a token to the method however if you want the internal token to be updated. In addition to that you can limit the simultaneous requests, and the timout if you create a new client. api_client = SpotifyApiClient ( auth_flow , hold_authentication = True ) # And if you already have a auth_token you can pass this token to the constructor api_client = SpotifyApiClient ( auth_flow , hold_authentication = True , auth_token = auth_token ) # Make the requests without passing the auth_token every time album = await api_client . albums . get_one ( album_id ) # Limit the requests and the timeout await api_client . create_new_client ( request_limit = 1500 , request_timeout = 30 ) Exceptions \u00b6 There are multiple exception which could get raised by the SpotifyApiClient . Every exception inherits from the SpotifyBaseError so if you want to catch every spotify exception you can do it with the SpotifyBaseError . The SpotifyError exception gets raised for general usage errors The TokenExpired exception gets raised if the spotify token used for making an api call is expired The RateLimitExceeded exception gets raised if the rate limit is exceeded The SpotifyAPIError exception gets raised for general errors like a invalid album id Each of the exceptions implements the get_json() method which will return the following json: { \"error\" : { \"status\" : 0 , \"message\" : \"\" } } The status is the HTTP status code and if not aplicable the number 0. The message is the reason something failed. try : album = await api_client . albums . get_one ( album_id ) except SpotifyAPIError as error : error = error . get_json () # Do something with the error message Code retrieval with a cookie \u00b6 Normally you have to get the code with the client credential workflow. If your user has already agreed to the scopes, and you have the cookie of the user you can get rid of this process. This is mostly intended for testing purposes, but you could also use it in your production environment in the very unlikely edge case that you have the spotify cookie of your user. You start like normal and create a new SpotifyApiClient . auth_flow = AuthorizationCodeFlow () auth_flow . load_from_env () api_client = SpotifyApiClient ( auth_flow , hold_authentication = True ) # Create a new spotify cookie cookie = SpotifyCookie () # Load the cookie from a file (you can also use the constructor to pass the data) cookies . load_from_file ( 'Path/to/cookie.json' ) # Get the coke with the spotify cookie code = await api . get_code_with_cookie ( cookie ) # Use the retrieved code to get the auth token auth_token = await api . get_auth_token_with_code ( code ) album = await api_client . albums . get_one ( album_id ) await api_client . close_client () Format of the cookie.json { \"sp_t\" : \"a\" , \"sp_dc\" : \"b\" , \"sp_key\" : \"c\" } Token expiration hook \u00b6 If you want to add a hook in case your auth token expires you can pass an instance of your TokenRenewClass to the SpotifyApiClient . Your TokenRenewClass has to implement an async call method which has the SpotifyApiClient as parameter and returns an updated and valid SpotifyAuthorisationToken . As long as you respect this interface you can do what you want (update a token in your database, ...). class YourTokenRenewClass : \"\"\" Renew the auth token every time it expires \"\"\" async def __call__ ( self , spotify_api_client : SpotifyApiClient ) -> SpotifyAuthorisationToken : \"\"\" Async method which gets called if the token is expired Args: spotify_api_client: The instance of the SpotifyApiClient Returns: A renewed spotify authorization token \"\"\" return await spotify_api_client . refresh_token () renew_class = YourTokenRenewClass () api_client = SpotifyApiClient ( auth_flow , token_renew_instance = renew_class ) # ... If you don't want to implement a class for your own and don't want to save the updated auth token to your database you can use the included TokenRenewClass . Because hold_authentication is set to True the SpotifyApiClient will save the renewed token in memory and use it to make request. from async_spotify import SpotifyApiClient , TokenRenewClass renew_token = TokenRenewClass () SpotifyApiClient ( auth_flow , hold_authentication = True , renew_token )","title":"Examples"},{"location":"EXAMPLES/#examples","text":"","title":"Examples"},{"location":"EXAMPLES/#getting-started","text":"If you want to start connecting to the spotify api you have to create a new instance of one of the AuthorizationCodeFlows. Currently onle the AuthorizationCodeFlow and ClientCredentialsFlow are supported. These AuthorizationCodeFlow hold all sorts of configurations. from async_spotify.authentification.authorization_flows import AuthorizationCodeFlow auth_flow = AuthorizationCodeFlow ( application_id = 'Your id' , application_secret = 'Your secret' , scopes = [ 'your' , 'scopes' ], redirect_url = 'your.redirect.url' ) # You can also load the auth_code_flow from environment variables. # If the variable does not exist the existing value will not be overwritten. auth_flow . load_from_env () These created auth_flow have to be passed to the SpotifyApiClient . # Create new client api_client = SpotifyApiClient ( auth_flow )","title":"Getting started"},{"location":"EXAMPLES/#authorization-code-flow","text":"To get a code from Spotify the user has to agree to the scopes your app asks for. For this you create an authorization, let the user visit this url and read the code parameter in the spotify redirect. # Build the authorization url for the users authorization_url : str = api_client . build_authorization_url ( show_dialog = True ) If you have some questions about this process read this spotify article about it. We will assume that you managed to get a code from spotify for a specific user. Now we have to exchange the code for an authorization token, and a refresh token. # Exchange the code for the tokens auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) After we recieved the auth_token we can start making request. But before we make this we have to create a new client which will be internally used for all the request making. # Create a new client which will handle the request await api_client . create_new_client () # Get information about an album album = await api_client . albums . get_one ( album_id , market = 'DE' , auth_token = auth_token ) # ... Important If you want to shut down your application and don't want to leak requests you have to call the close_client method of the api_client . # Close the client await api_client . close_client ()","title":"Authorization Code Flow"},{"location":"EXAMPLES/#client-credentials-flow","text":"In this case you only have to pass your auth_flow to your SpotifyApiClient and call the get_auth_token_with_client_credentials method. If you have some questions about this process read this potify article about it. # Create a auth flow (this time a ClientCredentialsFlow) auth_flow = ClientCredentialsFlow () auth_flow . load_from_env () # Pass it to the spotify client api_client = SpotifyApiClient ( auth_flow ) # Get the token from spotify await api_client . get_auth_token_with_client_credentials () # And start making requests await api . create_new_client () After we recieved the auth_token we can start making request. # Create a new client which will handle the request await api_client . create_new_client () # Get information about an album album = await api_client . albums . get_one ( album_id , market = 'DE' , auth_token = auth_token ) # ... Important If you want to shut down your application and don't want to leak requests you have to call the close_client method of the api_client . # Close the client await api_client . close_client ()","title":"Client Credentials Flow"},{"location":"EXAMPLES/#endpoints","text":"Every Api Endpoint is represented as an instance variables of the SpotifyApiClient . Look here for every instance variable and the associated classes. # For the albums endpoint api_client . albums . whatever () # For the artist endpoint api_client . artist . whatever ()","title":"Endpoints"},{"location":"EXAMPLES/#advanced-configuration","text":"If you don't want to pass the auth_token every time you make a request you can instruct the SpotifyApiClient to keep the token in memory. Every time you refresh the token the in memory token will be updated too. So you always have a valid token you can make requests with. If the token expires you will still have to refresh it yourself by calling the refresh_token method, which will returned the updated token. You don't have to pass a token to the method however if you want the internal token to be updated. In addition to that you can limit the simultaneous requests, and the timout if you create a new client. api_client = SpotifyApiClient ( auth_flow , hold_authentication = True ) # And if you already have a auth_token you can pass this token to the constructor api_client = SpotifyApiClient ( auth_flow , hold_authentication = True , auth_token = auth_token ) # Make the requests without passing the auth_token every time album = await api_client . albums . get_one ( album_id ) # Limit the requests and the timeout await api_client . create_new_client ( request_limit = 1500 , request_timeout = 30 )","title":"Advanced Configuration"},{"location":"EXAMPLES/#exceptions","text":"There are multiple exception which could get raised by the SpotifyApiClient . Every exception inherits from the SpotifyBaseError so if you want to catch every spotify exception you can do it with the SpotifyBaseError . The SpotifyError exception gets raised for general usage errors The TokenExpired exception gets raised if the spotify token used for making an api call is expired The RateLimitExceeded exception gets raised if the rate limit is exceeded The SpotifyAPIError exception gets raised for general errors like a invalid album id Each of the exceptions implements the get_json() method which will return the following json: { \"error\" : { \"status\" : 0 , \"message\" : \"\" } } The status is the HTTP status code and if not aplicable the number 0. The message is the reason something failed. try : album = await api_client . albums . get_one ( album_id ) except SpotifyAPIError as error : error = error . get_json () # Do something with the error message","title":"Exceptions"},{"location":"EXAMPLES/#code-retrieval-with-a-cookie","text":"Normally you have to get the code with the client credential workflow. If your user has already agreed to the scopes, and you have the cookie of the user you can get rid of this process. This is mostly intended for testing purposes, but you could also use it in your production environment in the very unlikely edge case that you have the spotify cookie of your user. You start like normal and create a new SpotifyApiClient . auth_flow = AuthorizationCodeFlow () auth_flow . load_from_env () api_client = SpotifyApiClient ( auth_flow , hold_authentication = True ) # Create a new spotify cookie cookie = SpotifyCookie () # Load the cookie from a file (you can also use the constructor to pass the data) cookies . load_from_file ( 'Path/to/cookie.json' ) # Get the coke with the spotify cookie code = await api . get_code_with_cookie ( cookie ) # Use the retrieved code to get the auth token auth_token = await api . get_auth_token_with_code ( code ) album = await api_client . albums . get_one ( album_id ) await api_client . close_client () Format of the cookie.json { \"sp_t\" : \"a\" , \"sp_dc\" : \"b\" , \"sp_key\" : \"c\" }","title":"Code retrieval with a cookie"},{"location":"EXAMPLES/#token-expiration-hook","text":"If you want to add a hook in case your auth token expires you can pass an instance of your TokenRenewClass to the SpotifyApiClient . Your TokenRenewClass has to implement an async call method which has the SpotifyApiClient as parameter and returns an updated and valid SpotifyAuthorisationToken . As long as you respect this interface you can do what you want (update a token in your database, ...). class YourTokenRenewClass : \"\"\" Renew the auth token every time it expires \"\"\" async def __call__ ( self , spotify_api_client : SpotifyApiClient ) -> SpotifyAuthorisationToken : \"\"\" Async method which gets called if the token is expired Args: spotify_api_client: The instance of the SpotifyApiClient Returns: A renewed spotify authorization token \"\"\" return await spotify_api_client . refresh_token () renew_class = YourTokenRenewClass () api_client = SpotifyApiClient ( auth_flow , token_renew_instance = renew_class ) # ... If you don't want to implement a class for your own and don't want to save the updated auth token to your database you can use the included TokenRenewClass . Because hold_authentication is set to True the SpotifyApiClient will save the renewed token in memory and use it to make request. from async_spotify import SpotifyApiClient , TokenRenewClass renew_token = TokenRenewClass () SpotifyApiClient ( auth_flow , hold_authentication = True , renew_token )","title":"Token expiration hook"},{"location":"LICENCE/","text":"MIT License Copyright (c) 2020 HuiiBuh Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"STUFF/","text":"Tests \u00b6 Install dependencies \u00b6 pip install -r requirements.dev.txt pip install -r requirements.txt Run the tests in IntelliJ \u00b6 Run the tests in the console \u00b6 Go into the root directory of this project and run the following command pytest -s --cov = async_spotify src/test --cov-report = xml Build and Publish \u00b6 python3 setup.py sdist twine upload dist/* Generate Docs \u00b6 To preview the docs run PYTHONPATH=src mkdocs serve -a 0.0.0.0:8000 To publish the docs run PYTHONPATH=src mkdocs gh-deploy","title":"Tests"},{"location":"STUFF/#tests","text":"","title":"Tests"},{"location":"STUFF/#install-dependencies","text":"pip install -r requirements.dev.txt pip install -r requirements.txt","title":"Install dependencies"},{"location":"STUFF/#run-the-tests-in-intellij","text":"","title":"Run the tests in IntelliJ"},{"location":"STUFF/#run-the-tests-in-the-console","text":"Go into the root directory of this project and run the following command pytest -s --cov = async_spotify src/test --cov-report = xml","title":"Run the tests in the console"},{"location":"STUFF/#build-and-publish","text":"python3 setup.py sdist twine upload dist/*","title":"Build and Publish"},{"location":"STUFF/#generate-docs","text":"To preview the docs run PYTHONPATH=src mkdocs serve -a 0.0.0.0:8000 To publish the docs run PYTHONPATH=src mkdocs gh-deploy","title":"Generate Docs"},{"location":"public_api/authentification/","text":"\u00b6 The AuthorisationToken is used to authorize the requests which get made. Every token has an activation_time and a access_token property which have to be present. The refresh_token property is only present if you use a authorization flow which provides a refresh_token. SpotifyAuthorisationToken \u00b6 Class that has the Authorisation Token valid: bool property readonly \u00b6 Validate that the token is not partially empty Returns: Type Description bool Is the token valid __eq__ ( self , other ) special \u00b6 Support for equal assertion Parameters: Name Type Description Default other The other object the comparison is made to required Returns: Type Description bool Is the content of the objects equal Source code in async_spotify/authentification/spotify_authorization_token.py 65 66 67 68 69 70 71 72 73 74 75 def __eq__ ( self , other ) -> bool : \"\"\" Support for equal assertion Args: other: The other object the comparison is made to Returns: Is the content of the objects equal \"\"\" return self . __dict__ == other . __dict__ __init__ ( self , refresh_token = None , activation_time = None , access_token = None ) special \u00b6 Generate a new authorisation token Parameters: Name Type Description Default refresh_token str The refresh token that was given to the application (not needed if client credentials workflow is used) None access_token str The token that will be used to make request None Source code in async_spotify/authentification/spotify_authorization_token.py 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , refresh_token : str = None , activation_time : int = None , access_token : str = None ): \"\"\" Generate a new authorisation token Args: refresh_token: The refresh token that was given to the application (not needed if client credentials workflow is used) access_token: The token that will be used to make request \"\"\" self . activation_time : int = activation_time self . refresh_token : str = refresh_token self . access_token : str = access_token is_expired ( self ) \u00b6 Checks if the api token has expired Returns: Type Description bool Is the token expired Source code in async_spotify/authentification/spotify_authorization_token.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def is_expired ( self ) -> bool : \"\"\" Checks if the api token has expired Returns: Is the token expired \"\"\" current_time : int = int ( time . time ()) # Check if token is valid (3600 would be correct, but a bit of time padding is always nice) if current_time - self . activation_time > 3400 : return True return False \u00b6 SpotifyCookie \u00b6 This class represents a spotify cookie. All of the provided values have to be set, otherwise the request will not be successful. valid: bool property readonly \u00b6 Check if all values are set correctly Returns: Type Description bool __init__ ( self , sp_t = None , sp_dc = None , sp_key = None ) special \u00b6 Create a new spotify cookie. All values have to be set if you want to use it Parameters: Name Type Description Default sp_t str The name of the spotify cookie (Use the raw value of the cookie as value of this) None sp_dc str The name of the spotify cookie (Use the raw value of the cookie as value of this) None sp_key str The name of the spotify cookie (Use the raw value of the cookie as value of this) None Source code in async_spotify/authentification/spotify_cookies.py 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , sp_t : str = None , sp_dc : str = None , sp_key : str = None ): \"\"\" Create a new spotify cookie. All values have to be set if you want to use it Args: sp_t: The name of the spotify cookie (Use the raw value of the cookie as value of this) sp_dc: The name of the spotify cookie (Use the raw value of the cookie as value of this) sp_key: The name of the spotify cookie (Use the raw value of the cookie as value of this) \"\"\" self . sp_t : str = sp_t self . sp_dc : str = sp_dc self . sp_key : str = sp_key load_from_file ( self , file_path ) \u00b6 Load the cookies from a file Parameters: Name Type Description Default file_path str The cookie file path required Source code in async_spotify/authentification/spotify_cookies.py 41 42 43 44 45 46 47 48 49 50 51 52 53 def load_from_file ( self , file_path : str ) -> None : \"\"\" Load the cookies from a file Args: file_path: The cookie file path \"\"\" with open ( file_path ) as file : file_json : dict = json . load ( file ) self . sp_t = file_json [ 'sp_t' ] self . sp_dc = file_json [ 'sp_dc' ] self . sp_key = file_json [ 'sp_key' ] \u00b6 AuthorizationCodeFlow \u00b6 A Class which implements the authorization flow Notes Scopes available: ugc-image-upload user-read-playback-state user-read-email playlist-read-collaborative user-modify-playback-state user-read-private playlist-modify-public user-library-modify user-top-read user-read-currently-playing playlist-read-private user-follow-read app-remote-control user-read-recently-played playlist-modify-private user-follow-modify user-library-read valid: bool property readonly \u00b6 Validate if the auth_code_flow can be used. This will only check if the values of the auth_code_flow are not empty. Returns: Type Description bool Are the auth_code_flow valid __init__ ( self , application_id = None , application_secret = None , scopes = None , redirect_url = None ) special \u00b6 Create a new Spotify AuthorizationCodeFlow Object Parameters: Name Type Description Default application_id str The id of the application None application_secret str The secret of the application None scopes List[str] The spotify scopes you app will request None redirect_url str The redirect url spotify will redirect the user after authentication None Source code in async_spotify/authentification/authorization_flows/authorization_code_flow.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def __init__ ( self , application_id : str = None , application_secret : str = None , scopes : List [ str ] = None , redirect_url : str = None ): \"\"\" Create a new Spotify AuthorizationCodeFlow Object Args: application_id: The id of the application application_secret: The secret of the application scopes: The spotify scopes you app will request redirect_url: The redirect url spotify will redirect the user after authentication \"\"\" self . application_id : str = application_id self . application_secret : str = application_secret self . scopes : List [ str ] = scopes self . redirect_url : str = redirect_url \u00b6 ClientCredentialsFlow \u00b6 Class which should be used for the Client credentials flow valid: bool property readonly \u00b6 Check if the ClientCredentialsFlow is valid Returns: boolean __init__ ( self , application_id = None , application_secret = None ) special \u00b6 Create a new Spotify AuthorizationCodeFlow Object Parameters: Name Type Description Default application_id str The id of the application None application_secret str The secret of the application None Source code in async_spotify/authentification/authorization_flows/client_credentials_flow.py 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , application_id : str = None , application_secret : str = None , ): \"\"\" Create a new Spotify AuthorizationCodeFlow Object Args: application_id: The id of the application application_secret: The secret of the application \"\"\" self . application_id : str = application_id self . application_secret : str = application_secret \u00b6 ClientCredentialsFlow \u00b6 Class which should be used for the Client credentials flow valid: bool property readonly \u00b6 Check if the ClientCredentialsFlow is valid Returns: boolean __init__ ( self , application_id = None , application_secret = None ) special \u00b6 Create a new Spotify AuthorizationCodeFlow Object Parameters: Name Type Description Default application_id str The id of the application None application_secret str The secret of the application None Source code in async_spotify/authentification/authorization_flows/client_credentials_flow.py 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , application_id : str = None , application_secret : str = None , ): \"\"\" Create a new Spotify AuthorizationCodeFlow Object Args: application_id: The id of the application application_secret: The secret of the application \"\"\" self . application_id : str = application_id self . application_secret : str = application_secret","title":"Authentification"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_authorization_token","text":"The AuthorisationToken is used to authorize the requests which get made. Every token has an activation_time and a access_token property which have to be present. The refresh_token property is only present if you use a authorization flow which provides a refresh_token.","title":"async_spotify.authentification.spotify_authorization_token"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_authorization_token.SpotifyAuthorisationToken","text":"Class that has the Authorisation Token","title":"SpotifyAuthorisationToken"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_authorization_token.SpotifyAuthorisationToken.valid","text":"Validate that the token is not partially empty Returns: Type Description bool Is the token valid","title":"valid"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_authorization_token.SpotifyAuthorisationToken.__eq__","text":"Support for equal assertion Parameters: Name Type Description Default other The other object the comparison is made to required Returns: Type Description bool Is the content of the objects equal Source code in async_spotify/authentification/spotify_authorization_token.py 65 66 67 68 69 70 71 72 73 74 75 def __eq__ ( self , other ) -> bool : \"\"\" Support for equal assertion Args: other: The other object the comparison is made to Returns: Is the content of the objects equal \"\"\" return self . __dict__ == other . __dict__","title":"__eq__()"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_authorization_token.SpotifyAuthorisationToken.__init__","text":"Generate a new authorisation token Parameters: Name Type Description Default refresh_token str The refresh token that was given to the application (not needed if client credentials workflow is used) None access_token str The token that will be used to make request None Source code in async_spotify/authentification/spotify_authorization_token.py 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , refresh_token : str = None , activation_time : int = None , access_token : str = None ): \"\"\" Generate a new authorisation token Args: refresh_token: The refresh token that was given to the application (not needed if client credentials workflow is used) access_token: The token that will be used to make request \"\"\" self . activation_time : int = activation_time self . refresh_token : str = refresh_token self . access_token : str = access_token","title":"__init__()"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_authorization_token.SpotifyAuthorisationToken.is_expired","text":"Checks if the api token has expired Returns: Type Description bool Is the token expired Source code in async_spotify/authentification/spotify_authorization_token.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def is_expired ( self ) -> bool : \"\"\" Checks if the api token has expired Returns: Is the token expired \"\"\" current_time : int = int ( time . time ()) # Check if token is valid (3600 would be correct, but a bit of time padding is always nice) if current_time - self . activation_time > 3400 : return True return False","title":"is_expired()"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_cookies","text":"","title":"async_spotify.authentification.spotify_cookies"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_cookies.SpotifyCookie","text":"This class represents a spotify cookie. All of the provided values have to be set, otherwise the request will not be successful.","title":"SpotifyCookie"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_cookies.SpotifyCookie.valid","text":"Check if all values are set correctly Returns: Type Description bool","title":"valid"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_cookies.SpotifyCookie.__init__","text":"Create a new spotify cookie. All values have to be set if you want to use it Parameters: Name Type Description Default sp_t str The name of the spotify cookie (Use the raw value of the cookie as value of this) None sp_dc str The name of the spotify cookie (Use the raw value of the cookie as value of this) None sp_key str The name of the spotify cookie (Use the raw value of the cookie as value of this) None Source code in async_spotify/authentification/spotify_cookies.py 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , sp_t : str = None , sp_dc : str = None , sp_key : str = None ): \"\"\" Create a new spotify cookie. All values have to be set if you want to use it Args: sp_t: The name of the spotify cookie (Use the raw value of the cookie as value of this) sp_dc: The name of the spotify cookie (Use the raw value of the cookie as value of this) sp_key: The name of the spotify cookie (Use the raw value of the cookie as value of this) \"\"\" self . sp_t : str = sp_t self . sp_dc : str = sp_dc self . sp_key : str = sp_key","title":"__init__()"},{"location":"public_api/authentification/#async_spotify.authentification.spotify_cookies.SpotifyCookie.load_from_file","text":"Load the cookies from a file Parameters: Name Type Description Default file_path str The cookie file path required Source code in async_spotify/authentification/spotify_cookies.py 41 42 43 44 45 46 47 48 49 50 51 52 53 def load_from_file ( self , file_path : str ) -> None : \"\"\" Load the cookies from a file Args: file_path: The cookie file path \"\"\" with open ( file_path ) as file : file_json : dict = json . load ( file ) self . sp_t = file_json [ 'sp_t' ] self . sp_dc = file_json [ 'sp_dc' ] self . sp_key = file_json [ 'sp_key' ]","title":"load_from_file()"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.authorization_code_flow","text":"","title":"async_spotify.authentification.authorization_flows.authorization_code_flow"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.authorization_code_flow.AuthorizationCodeFlow","text":"A Class which implements the authorization flow Notes Scopes available: ugc-image-upload user-read-playback-state user-read-email playlist-read-collaborative user-modify-playback-state user-read-private playlist-modify-public user-library-modify user-top-read user-read-currently-playing playlist-read-private user-follow-read app-remote-control user-read-recently-played playlist-modify-private user-follow-modify user-library-read","title":"AuthorizationCodeFlow"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.authorization_code_flow.AuthorizationCodeFlow.valid","text":"Validate if the auth_code_flow can be used. This will only check if the values of the auth_code_flow are not empty. Returns: Type Description bool Are the auth_code_flow valid","title":"valid"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.authorization_code_flow.AuthorizationCodeFlow.__init__","text":"Create a new Spotify AuthorizationCodeFlow Object Parameters: Name Type Description Default application_id str The id of the application None application_secret str The secret of the application None scopes List[str] The spotify scopes you app will request None redirect_url str The redirect url spotify will redirect the user after authentication None Source code in async_spotify/authentification/authorization_flows/authorization_code_flow.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def __init__ ( self , application_id : str = None , application_secret : str = None , scopes : List [ str ] = None , redirect_url : str = None ): \"\"\" Create a new Spotify AuthorizationCodeFlow Object Args: application_id: The id of the application application_secret: The secret of the application scopes: The spotify scopes you app will request redirect_url: The redirect url spotify will redirect the user after authentication \"\"\" self . application_id : str = application_id self . application_secret : str = application_secret self . scopes : List [ str ] = scopes self . redirect_url : str = redirect_url","title":"__init__()"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow","text":"","title":"async_spotify.authentification.authorization_flows.client_credentials_flow"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow.ClientCredentialsFlow","text":"Class which should be used for the Client credentials flow","title":"ClientCredentialsFlow"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow.ClientCredentialsFlow.valid","text":"Check if the ClientCredentialsFlow is valid Returns: boolean","title":"valid"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow.ClientCredentialsFlow.__init__","text":"Create a new Spotify AuthorizationCodeFlow Object Parameters: Name Type Description Default application_id str The id of the application None application_secret str The secret of the application None Source code in async_spotify/authentification/authorization_flows/client_credentials_flow.py 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , application_id : str = None , application_secret : str = None , ): \"\"\" Create a new Spotify AuthorizationCodeFlow Object Args: application_id: The id of the application application_secret: The secret of the application \"\"\" self . application_id : str = application_id self . application_secret : str = application_secret","title":"__init__()"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow","text":"","title":"async_spotify.authentification.authorization_flows.client_credentials_flow"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow.ClientCredentialsFlow","text":"Class which should be used for the Client credentials flow","title":"ClientCredentialsFlow"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow.ClientCredentialsFlow.valid","text":"Check if the ClientCredentialsFlow is valid Returns: boolean","title":"valid"},{"location":"public_api/authentification/#async_spotify.authentification.authorization_flows.client_credentials_flow.ClientCredentialsFlow.__init__","text":"Create a new Spotify AuthorizationCodeFlow Object Parameters: Name Type Description Default application_id str The id of the application None application_secret str The secret of the application None Source code in async_spotify/authentification/authorization_flows/client_credentials_flow.py 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , application_id : str = None , application_secret : str = None , ): \"\"\" Create a new Spotify AuthorizationCodeFlow Object Args: application_id: The id of the application application_secret: The secret of the application \"\"\" self . application_id : str = application_id self . application_secret : str = application_secret","title":"__init__()"},{"location":"public_api/spotify_api_client/","text":"\u00b6 SpotifyApiClient \u00b6 The class which will be used to authenticate and connect to the spotify api. albums: Albums \u00b6 An instance of the [ Albums ][async_spotify.api._endpoints.albums] class. Use this to access the Albums api artists: Artists \u00b6 An instance of the [ Artists ][async_spotify.api._endpoints.artists] class. Use this to access the Artists api browse: Browse \u00b6 An instance of the [ Browse ][async_spotify.api._endpoints.browse] class. Use this to Browse the Browse api episodes: Episodes \u00b6 An instance of the [ Episodes ][async_spotify.api._endpoints.episodes] class. Use this to access the Episodes api follow: Follow \u00b6 An instance of the [ Follow ][async_spotify.api._endpoints.follow] class. Use this to access the Follow api hold_authentication: bool property writable \u00b6 Returns: Type Description bool The hold_authentication property of the spotify api client class library: Library \u00b6 An instance of the [ Library ][async_spotify.api._endpoints.library] class. Use this to access the Library api personalization: Personalization \u00b6 An instance of the [ Personalization ][async_spotify.api._endpoints.personalization] class. Use this to access the Personalization api player: Player \u00b6 An instance of the [ Player ][async_spotify.api._endpoints.player] class. Use this to access the Player api playlists: Playlists \u00b6 An instance of the [ Playlists ][async_spotify.api._endpoints.playlists] class. Use this to access the Playlist api search: Search \u00b6 An instance of the [ Search ][async_spotify.api._endpoints.search] class. Use this to access the Search api shows: Shows \u00b6 An instance of the [ Shows ][async_spotify.api._endpoints.shows] class. Use this to access the Show api spotify_authorization_token: SpotifyAuthorisationToken property writable \u00b6 Returns: Type Description SpotifyAuthorisationToken The SpotifyAuthorisationToken of the api class token_renew_instance: TokenRenewClass property writable \u00b6 Returns the token renew class instance Returns: The token renew class instance track: Track \u00b6 An instance of the [ Track ][async_spotify.api._endpoints.tracks] class. Use this to access the Track api user: User \u00b6 An instance of the [ User ][async_spotify.api._endpoints.user] class. Use this to access the User api __init__ ( self , authorization_flow , hold_authentication = False , spotify_authorisation_token = None , token_renew_instance = None ) special \u00b6 Create a new api class Parameters: Name Type Description Default authorization_flow AuthorizationFlow The auth_code_flow object fully filled with information required hold_authentication Should the api keep the authentication im memory and refresh it automatically False token_renew_instance TokenRenewClass An instance of a class which handles the renewing of the token if it should expire None Source code in async_spotify/api/spotify_api_client.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def __init__ ( self , authorization_flow : AuthorizationFlow , hold_authentication = False , spotify_authorisation_token : SpotifyAuthorisationToken = None , token_renew_instance : TokenRenewClass = None ): \"\"\" Create a new api class Args: authorization_flow: The auth_code_flow object fully filled with information hold_authentication: Should the api keep the authentication im memory and refresh it automatically token_renew_instance: An instance of a class which handles the renewing of the token if it should expire \"\"\" # Check if the auth_code_flow are valid if not authorization_flow . valid : raise SpotifyError ( ErrorMessage ( message = \"The auth flow instance of your app is not correct\" ) . __dict__ ) self . authorization_flow : AuthorizationFlow = authorization_flow # Set the SpotifyAuthorisationToken if spotify_authorisation_token : self . _spotify_authorisation_token : SpotifyAuthorisationToken = spotify_authorisation_token else : self . _spotify_authorisation_token : SpotifyAuthorisationToken = SpotifyAuthorisationToken () self . _token_renew_instance : TokenRenewClass = token_renew_instance self . _hold_authentication : bool = hold_authentication self . _api_request_handler : ApiRequestHandler = ApiRequestHandler ( self . _spotify_authorisation_token , token_renew_instance , self ) ################################################################################################################ self . albums : Albums = Albums ( self . _api_request_handler ) \"\"\" An instance of the [`Albums`][async_spotify.api._endpoints.albums] class. Use this to access the Albums api \"\"\" self . artists : Artists = Artists ( self . _api_request_handler ) \"\"\" An instance of the [`Artists`][async_spotify.api._endpoints.artists] class. Use this to access the Artists api \"\"\" self . browse : Browse = Browse ( self . _api_request_handler ) \"\"\" An instance of the [`Browse`][async_spotify.api._endpoints.browse] class. Use this to Browse the Browse api \"\"\" self . episodes : Episodes = Episodes ( self . _api_request_handler ) \"\"\" An instance of the [`Episodes`][async_spotify.api._endpoints.episodes] class. Use this to access the Episodes api \"\"\" self . follow : Follow = Follow ( self . _api_request_handler ) \"\"\" An instance of the [`Follow`][async_spotify.api._endpoints.follow] class. Use this to access the Follow api \"\"\" self . library : Library = Library ( self . _api_request_handler ) \"\"\" An instance of the [`Library`][async_spotify.api._endpoints.library] class. Use this to access the Library api \"\"\" self . personalization : Personalization = Personalization ( self . _api_request_handler ) \"\"\" An instance of the [`Personalization`][async_spotify.api._endpoints.personalization] class. Use this to access the Personalization api \"\"\" self . player : Player = Player ( self . _api_request_handler ) \"\"\" An instance of the [`Player`][async_spotify.api._endpoints.player] class. Use this to access the Player api \"\"\" self . playlists : Playlists = Playlists ( self . _api_request_handler ) \"\"\" An instance of the [`Playlists`][async_spotify.api._endpoints.playlists] class. Use this to access the Playlist api \"\"\" self . search : Search = Search ( self . _api_request_handler ) \"\"\" An instance of the [`Search`][async_spotify.api._endpoints.search] class. Use this to access the Search api \"\"\" self . shows : Shows = Shows ( self . _api_request_handler ) \"\"\" An instance of the [`Shows`][async_spotify.api._endpoints.shows] class. Use this to access the Show api \"\"\" self . track : Track = Track ( self . _api_request_handler ) \"\"\" An instance of the [`Track`][async_spotify.api._endpoints.tracks] class. Use this to access the Track api \"\"\" self . user : User = User ( self . _api_request_handler ) \"\"\" An instance of the [`User`][async_spotify.api._endpoints.user] class. Use this to access the User api \"\"\" build_authorization_url ( self , show_dialog = True , state = None ) \u00b6 Builds the URL for the authorisation Parameters: Name Type Description Default state str State of the authorization None show_dialog bool Should the spotify auth dialog be shown True Returns: Type Description str The encoded url which can be used to authorize a new or existing user Source code in async_spotify/api/spotify_api_client.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 def build_authorization_url ( self , show_dialog : bool = True , state : str = None ) -> str : \"\"\" Builds the URL for the authorisation Args: state: State of the authorization show_dialog: Should the spotify auth dialog be shown Returns: The encoded url which can be used to authorize a new or existing user \"\"\" self . _enforce_flows () # TODO PKCEFlow self . authorization_flow : Union [ AuthorizationCodeFlow ] params = { \"client_id\" : self . authorization_flow . application_id , \"response_type\" : \"code\" , \"scope\" : ' ' . join ( self . authorization_flow . scopes ), \"show_dialog\" : f \" { show_dialog } \" , \"redirect_uri\" : f \" { self . authorization_flow . redirect_url } \" } # Check if a state is required if state : params [ \"state\" ] = f \" { state } \" return f \" { URLS . AUTHORIZE } ? { urlencode ( params ) } \" close_client ( self ) \u00b6 Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program Source code in async_spotify/api/spotify_api_client.py 147 148 149 150 151 152 153 async def close_client ( self ) -> None : \"\"\" Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program \"\"\" await self . _api_request_handler . close_client () create_new_client ( self , request_timeout = 30 , request_limit = 500 ) \u00b6 Create a new session which will be used to connect to the spotify api. In general this only has to be called once after you create a new API object. You can however call this method if you want ot update the client settings (more requests, ...) This will however close all ongoing requests. Parameters: Name Type Description Default request_timeout int How long should be waited for a request (default 30s) (None for no limit) 30 request_limit int How many requests should be allowed (default 500) 500 Source code in async_spotify/api/spotify_api_client.py 133 134 135 136 137 138 139 140 141 142 143 144 145 async def create_new_client ( self , request_timeout : int = 30 , request_limit : int = 500 ) -> None : \"\"\" Create a new session which will be used to connect to the spotify api. In general this only has to be called once after you create a new API object. You can however call this method if you want ot update the client settings (more requests, ...) This will however close all ongoing requests. Args: request_timeout: How long should be waited for a request (default 30s) (None for no limit) request_limit: How many requests should be allowed (default 500) \"\"\" await self . _api_request_handler . create_new_client ( request_timeout , request_limit ) get_auth_token_with_client_credentials ( self ) \u00b6 Get the auth token with the client credential flow Notes [https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow]/https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow) Exceptions: Type Description SpotifyError If the request to the refresh api point was not successful Returns: Type Description SpotifyAuthorisationToken A valid SpotifyAuthorisationToken Source code in async_spotify/api/spotify_api_client.py 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 async def get_auth_token_with_client_credentials ( self ) -> SpotifyAuthorisationToken : \"\"\" Get the auth token with the client credential flow Notes: [https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow]/https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow) Raises: SpotifyError: If the request to the refresh api point was not successful Returns: A valid SpotifyAuthorisationToken \"\"\" if not isinstance ( self . authorization_flow , ClientCredentialsFlow ): raise SpotifyError ( ErrorMessage ( message = \"Your authorization flow cannot build an authorization url. \" \"Select the ClientCredentialsFlow instead\" ) . __dict__ ) body : dict = { 'grant_type' : 'client_credentials' , } return await self . _get_token ( body ) get_auth_token_with_code ( self , code ) \u00b6 Get the auth token with the code returned by the oauth process. Parameters: Name Type Description Default code str The code returned by spotify in the oauth process required Notes https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow Exceptions: Type Description SpotifyError If the request to the refresh api point was not successful Returns: Type Description SpotifyAuthorisationToken A valid SpotifyAuthorisationToken Source code in async_spotify/api/spotify_api_client.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 async def get_auth_token_with_code ( self , code : str ) -> SpotifyAuthorisationToken : \"\"\" Get the auth token with the code returned by the oauth process. Args: code: The code returned by spotify in the oauth process Notes: [https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow](https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow) Raises: SpotifyError: If the request to the refresh api point was not successful Returns: A valid SpotifyAuthorisationToken \"\"\" # TODO PKCEFlow self . _enforce_flows () self . authorization_flow : Union [ AuthorizationCodeFlow ] body : dict = { 'grant_type' : 'authorization_code' , 'code' : code , 'redirect_uri' : self . authorization_flow . redirect_url } return await self . _get_token ( body ) get_code_with_cookie ( self , cookies ) \u00b6 This function takes care of the user interaction that is normally required to get the code from spotify which is necessary to request the refresh_token and the oauth_token. The token which is returned by this function has to be passed to API.get_auth_token_with_code(code) to get the refresh_token and the oauth_token. The big advantage is that you don't have to run a callback server to get the code Notes This will only work if the user has at least once accepted the scopes your app is requesting. I would recommend that you take a look at the source code of this function before you use it and that you are familiar with the authorization mechanism of spotify. Important This method is intended for automated testing. You have to decide if you want to use it in you production environment. Parameters: Name Type Description Default cookies SpotifyCookie The cookies of the spotify account. Every property of the class has to be filled in. required Exceptions: Type Description SpotifyError If the cookie is not valid SpotifyError If there is a redirect between you and spotify SpotifyError If there is an unknown error Returns: Type Description str The spotify code which can be used to get a refresh_token and a oauth_token Source code in async_spotify/api/spotify_api_client.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def get_code_with_cookie ( self , cookies : SpotifyCookie ) -> str : \"\"\" This function takes care of the user interaction that is normally required to get the code from spotify which is necessary to request the refresh_token and the oauth_token. The token which is returned by this function has to be passed to API.get_auth_token_with_code(code) to get the refresh_token and the oauth_token. The big advantage is that you don't have to run a callback server to get the code Notes: This will only work if the user has at least once accepted the scopes your app is requesting. I would recommend that you take a look at the source code of this function before you use it and that you are familiar with the authorization mechanism of spotify. Important: This method is intended for automated testing. You have to decide if you want to use it in you production environment. Args: cookies: The cookies of the spotify account. Every property of the class has to be filled in. Raises: SpotifyError: If the cookie is not valid SpotifyError: If there is a redirect between you and spotify SpotifyError: If there is an unknown error Returns: The spotify code which can be used to get a refresh_token and a oauth_token \"\"\" # Build the auth url url = self . build_authorization_url ( show_dialog = False ) # Check if the cookie file is valid if not cookies . valid : raise SpotifyError ( ErrorMessage ( message = 'The cookies are not complete' ) . __dict__ ) # Convert the class to a dict cookie_dict : dict = cookies . __dict__ return await self . _track_request_without_callback ( cookie_dict , url ) next ( self , url , auth_token = None ) \u00b6 Get the next 'page' of the response Parameters: Name Type Description Default url str The next url required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The api response Source code in async_spotify/api/spotify_api_client.py 446 447 448 449 450 451 452 453 454 455 456 457 458 async def next ( self , url : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get the next 'page' of the response Args: url: The next url auth_token: The auth token if you set the api class not to keep the token in memory Returns: The api response \"\"\" return await self . _api_request_handler . make_request ( 'GET' , url , {}, auth_token ) open_oauth_dialog_in_browser ( self , show_dialogue = True ) \u00b6 Open the url in browser Only for testing purposes or the usage of this library in a desktop app Parameters: Name Type Description Default show_dialogue bool Should the spotify auth dialog be shown True Source code in async_spotify/api/spotify_api_client.py 185 186 187 188 189 190 191 192 193 194 195 def open_oauth_dialog_in_browser ( self , show_dialogue : bool = True ) -> None : \"\"\" Open the url in browser Only for testing purposes or the usage of this library in a desktop app Args: show_dialogue: Should the spotify auth dialog be shown \"\"\" # Open url in a new window of the default browser, if possible webbrowser . open_new ( self . build_authorization_url ( show_dialogue )) previous ( self , url , auth_token = None ) \u00b6 Get the next 'previous' of the response Parameters: Name Type Description Default url str The previous url required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The api response Source code in async_spotify/api/spotify_api_client.py 460 461 462 463 464 465 466 467 468 469 470 471 472 async def previous ( self , url : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get the next 'previous' of the response Args: url: The previous url auth_token: The auth token if you set the api class not to keep the token in memory Returns: The api response \"\"\" return await self . _api_request_handler . make_request ( 'GET' , url , {}, auth_token ) refresh_token ( self , auth_token = None ) \u00b6 Refresh the auth token with the refresh token or get a new auth token and refresh token with the code returned by the spotify auth flow. Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The refresh token or the code returned by the spotify auth flow. Leave empty if you enabled hold_authentication. Then the internal token will be used. None Notes https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow Returns: Type Description SpotifyAuthorisationToken The SpotifyAuthorisationToken Source code in async_spotify/api/spotify_api_client.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 async def refresh_token ( self , auth_token : SpotifyAuthorisationToken = None ) -> SpotifyAuthorisationToken : \"\"\" Refresh the auth token with the refresh token or get a new auth token and refresh token with the code returned by the spotify auth flow. Args: auth_token: The refresh token or the code returned by the spotify auth flow. Leave empty if you enabled hold_authentication. Then the internal token will be used. Notes: https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow Returns: The SpotifyAuthorisationToken \"\"\" self . _enforce_flows () # Check if the internal auth token should be used if not auth_token and self . _hold_authentication : auth_token = self . _spotify_authorisation_token body : dict = { 'grant_type' : 'refresh_token' , 'refresh_token' : auth_token . refresh_token } response_json : dict = await self . _make_auth_api_request ( body ) refresh_token = auth_token . refresh_token access_token = response_json [ 'access_token' ] # Keep the auth token in memory self . _spotify_authorisation_token . refresh_token = refresh_token self . _spotify_authorisation_token . activation_time = int ( time . time ()) self . _spotify_authorisation_token . access_token = access_token return deepcopy ( self . _spotify_authorisation_token )","title":"Spotify Api Client"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client","text":"","title":"async_spotify.api.spotify_api_client"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient","text":"The class which will be used to authenticate and connect to the spotify api.","title":"SpotifyApiClient"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.albums","text":"An instance of the [ Albums ][async_spotify.api._endpoints.albums] class. Use this to access the Albums api","title":"albums"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.artists","text":"An instance of the [ Artists ][async_spotify.api._endpoints.artists] class. Use this to access the Artists api","title":"artists"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.browse","text":"An instance of the [ Browse ][async_spotify.api._endpoints.browse] class. Use this to Browse the Browse api","title":"browse"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.episodes","text":"An instance of the [ Episodes ][async_spotify.api._endpoints.episodes] class. Use this to access the Episodes api","title":"episodes"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.follow","text":"An instance of the [ Follow ][async_spotify.api._endpoints.follow] class. Use this to access the Follow api","title":"follow"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.hold_authentication","text":"Returns: Type Description bool The hold_authentication property of the spotify api client class","title":"hold_authentication"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.library","text":"An instance of the [ Library ][async_spotify.api._endpoints.library] class. Use this to access the Library api","title":"library"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.personalization","text":"An instance of the [ Personalization ][async_spotify.api._endpoints.personalization] class. Use this to access the Personalization api","title":"personalization"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.player","text":"An instance of the [ Player ][async_spotify.api._endpoints.player] class. Use this to access the Player api","title":"player"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.playlists","text":"An instance of the [ Playlists ][async_spotify.api._endpoints.playlists] class. Use this to access the Playlist api","title":"playlists"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.search","text":"An instance of the [ Search ][async_spotify.api._endpoints.search] class. Use this to access the Search api","title":"search"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.shows","text":"An instance of the [ Shows ][async_spotify.api._endpoints.shows] class. Use this to access the Show api","title":"shows"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.spotify_authorization_token","text":"Returns: Type Description SpotifyAuthorisationToken The SpotifyAuthorisationToken of the api class","title":"spotify_authorization_token"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.token_renew_instance","text":"Returns the token renew class instance Returns: The token renew class instance","title":"token_renew_instance"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.track","text":"An instance of the [ Track ][async_spotify.api._endpoints.tracks] class. Use this to access the Track api","title":"track"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.user","text":"An instance of the [ User ][async_spotify.api._endpoints.user] class. Use this to access the User api","title":"user"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.__init__","text":"Create a new api class Parameters: Name Type Description Default authorization_flow AuthorizationFlow The auth_code_flow object fully filled with information required hold_authentication Should the api keep the authentication im memory and refresh it automatically False token_renew_instance TokenRenewClass An instance of a class which handles the renewing of the token if it should expire None Source code in async_spotify/api/spotify_api_client.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def __init__ ( self , authorization_flow : AuthorizationFlow , hold_authentication = False , spotify_authorisation_token : SpotifyAuthorisationToken = None , token_renew_instance : TokenRenewClass = None ): \"\"\" Create a new api class Args: authorization_flow: The auth_code_flow object fully filled with information hold_authentication: Should the api keep the authentication im memory and refresh it automatically token_renew_instance: An instance of a class which handles the renewing of the token if it should expire \"\"\" # Check if the auth_code_flow are valid if not authorization_flow . valid : raise SpotifyError ( ErrorMessage ( message = \"The auth flow instance of your app is not correct\" ) . __dict__ ) self . authorization_flow : AuthorizationFlow = authorization_flow # Set the SpotifyAuthorisationToken if spotify_authorisation_token : self . _spotify_authorisation_token : SpotifyAuthorisationToken = spotify_authorisation_token else : self . _spotify_authorisation_token : SpotifyAuthorisationToken = SpotifyAuthorisationToken () self . _token_renew_instance : TokenRenewClass = token_renew_instance self . _hold_authentication : bool = hold_authentication self . _api_request_handler : ApiRequestHandler = ApiRequestHandler ( self . _spotify_authorisation_token , token_renew_instance , self ) ################################################################################################################ self . albums : Albums = Albums ( self . _api_request_handler ) \"\"\" An instance of the [`Albums`][async_spotify.api._endpoints.albums] class. Use this to access the Albums api \"\"\" self . artists : Artists = Artists ( self . _api_request_handler ) \"\"\" An instance of the [`Artists`][async_spotify.api._endpoints.artists] class. Use this to access the Artists api \"\"\" self . browse : Browse = Browse ( self . _api_request_handler ) \"\"\" An instance of the [`Browse`][async_spotify.api._endpoints.browse] class. Use this to Browse the Browse api \"\"\" self . episodes : Episodes = Episodes ( self . _api_request_handler ) \"\"\" An instance of the [`Episodes`][async_spotify.api._endpoints.episodes] class. Use this to access the Episodes api \"\"\" self . follow : Follow = Follow ( self . _api_request_handler ) \"\"\" An instance of the [`Follow`][async_spotify.api._endpoints.follow] class. Use this to access the Follow api \"\"\" self . library : Library = Library ( self . _api_request_handler ) \"\"\" An instance of the [`Library`][async_spotify.api._endpoints.library] class. Use this to access the Library api \"\"\" self . personalization : Personalization = Personalization ( self . _api_request_handler ) \"\"\" An instance of the [`Personalization`][async_spotify.api._endpoints.personalization] class. Use this to access the Personalization api \"\"\" self . player : Player = Player ( self . _api_request_handler ) \"\"\" An instance of the [`Player`][async_spotify.api._endpoints.player] class. Use this to access the Player api \"\"\" self . playlists : Playlists = Playlists ( self . _api_request_handler ) \"\"\" An instance of the [`Playlists`][async_spotify.api._endpoints.playlists] class. Use this to access the Playlist api \"\"\" self . search : Search = Search ( self . _api_request_handler ) \"\"\" An instance of the [`Search`][async_spotify.api._endpoints.search] class. Use this to access the Search api \"\"\" self . shows : Shows = Shows ( self . _api_request_handler ) \"\"\" An instance of the [`Shows`][async_spotify.api._endpoints.shows] class. Use this to access the Show api \"\"\" self . track : Track = Track ( self . _api_request_handler ) \"\"\" An instance of the [`Track`][async_spotify.api._endpoints.tracks] class. Use this to access the Track api \"\"\" self . user : User = User ( self . _api_request_handler ) \"\"\" An instance of the [`User`][async_spotify.api._endpoints.user] class. Use this to access the User api \"\"\"","title":"__init__()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.build_authorization_url","text":"Builds the URL for the authorisation Parameters: Name Type Description Default state str State of the authorization None show_dialog bool Should the spotify auth dialog be shown True Returns: Type Description str The encoded url which can be used to authorize a new or existing user Source code in async_spotify/api/spotify_api_client.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 def build_authorization_url ( self , show_dialog : bool = True , state : str = None ) -> str : \"\"\" Builds the URL for the authorisation Args: state: State of the authorization show_dialog: Should the spotify auth dialog be shown Returns: The encoded url which can be used to authorize a new or existing user \"\"\" self . _enforce_flows () # TODO PKCEFlow self . authorization_flow : Union [ AuthorizationCodeFlow ] params = { \"client_id\" : self . authorization_flow . application_id , \"response_type\" : \"code\" , \"scope\" : ' ' . join ( self . authorization_flow . scopes ), \"show_dialog\" : f \" { show_dialog } \" , \"redirect_uri\" : f \" { self . authorization_flow . redirect_url } \" } # Check if a state is required if state : params [ \"state\" ] = f \" { state } \" return f \" { URLS . AUTHORIZE } ? { urlencode ( params ) } \"","title":"build_authorization_url()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.close_client","text":"Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program Source code in async_spotify/api/spotify_api_client.py 147 148 149 150 151 152 153 async def close_client ( self ) -> None : \"\"\" Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program \"\"\" await self . _api_request_handler . close_client ()","title":"close_client()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.create_new_client","text":"Create a new session which will be used to connect to the spotify api. In general this only has to be called once after you create a new API object. You can however call this method if you want ot update the client settings (more requests, ...) This will however close all ongoing requests. Parameters: Name Type Description Default request_timeout int How long should be waited for a request (default 30s) (None for no limit) 30 request_limit int How many requests should be allowed (default 500) 500 Source code in async_spotify/api/spotify_api_client.py 133 134 135 136 137 138 139 140 141 142 143 144 145 async def create_new_client ( self , request_timeout : int = 30 , request_limit : int = 500 ) -> None : \"\"\" Create a new session which will be used to connect to the spotify api. In general this only has to be called once after you create a new API object. You can however call this method if you want ot update the client settings (more requests, ...) This will however close all ongoing requests. Args: request_timeout: How long should be waited for a request (default 30s) (None for no limit) request_limit: How many requests should be allowed (default 500) \"\"\" await self . _api_request_handler . create_new_client ( request_timeout , request_limit )","title":"create_new_client()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.get_auth_token_with_client_credentials","text":"Get the auth token with the client credential flow Notes [https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow]/https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow) Exceptions: Type Description SpotifyError If the request to the refresh api point was not successful Returns: Type Description SpotifyAuthorisationToken A valid SpotifyAuthorisationToken Source code in async_spotify/api/spotify_api_client.py 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 async def get_auth_token_with_client_credentials ( self ) -> SpotifyAuthorisationToken : \"\"\" Get the auth token with the client credential flow Notes: [https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow]/https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow) Raises: SpotifyError: If the request to the refresh api point was not successful Returns: A valid SpotifyAuthorisationToken \"\"\" if not isinstance ( self . authorization_flow , ClientCredentialsFlow ): raise SpotifyError ( ErrorMessage ( message = \"Your authorization flow cannot build an authorization url. \" \"Select the ClientCredentialsFlow instead\" ) . __dict__ ) body : dict = { 'grant_type' : 'client_credentials' , } return await self . _get_token ( body )","title":"get_auth_token_with_client_credentials()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.get_auth_token_with_code","text":"Get the auth token with the code returned by the oauth process. Parameters: Name Type Description Default code str The code returned by spotify in the oauth process required Notes https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow Exceptions: Type Description SpotifyError If the request to the refresh api point was not successful Returns: Type Description SpotifyAuthorisationToken A valid SpotifyAuthorisationToken Source code in async_spotify/api/spotify_api_client.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 async def get_auth_token_with_code ( self , code : str ) -> SpotifyAuthorisationToken : \"\"\" Get the auth token with the code returned by the oauth process. Args: code: The code returned by spotify in the oauth process Notes: [https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow](https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow) Raises: SpotifyError: If the request to the refresh api point was not successful Returns: A valid SpotifyAuthorisationToken \"\"\" # TODO PKCEFlow self . _enforce_flows () self . authorization_flow : Union [ AuthorizationCodeFlow ] body : dict = { 'grant_type' : 'authorization_code' , 'code' : code , 'redirect_uri' : self . authorization_flow . redirect_url } return await self . _get_token ( body )","title":"get_auth_token_with_code()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.get_code_with_cookie","text":"This function takes care of the user interaction that is normally required to get the code from spotify which is necessary to request the refresh_token and the oauth_token. The token which is returned by this function has to be passed to API.get_auth_token_with_code(code) to get the refresh_token and the oauth_token. The big advantage is that you don't have to run a callback server to get the code Notes This will only work if the user has at least once accepted the scopes your app is requesting. I would recommend that you take a look at the source code of this function before you use it and that you are familiar with the authorization mechanism of spotify. Important This method is intended for automated testing. You have to decide if you want to use it in you production environment. Parameters: Name Type Description Default cookies SpotifyCookie The cookies of the spotify account. Every property of the class has to be filled in. required Exceptions: Type Description SpotifyError If the cookie is not valid SpotifyError If there is a redirect between you and spotify SpotifyError If there is an unknown error Returns: Type Description str The spotify code which can be used to get a refresh_token and a oauth_token Source code in async_spotify/api/spotify_api_client.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def get_code_with_cookie ( self , cookies : SpotifyCookie ) -> str : \"\"\" This function takes care of the user interaction that is normally required to get the code from spotify which is necessary to request the refresh_token and the oauth_token. The token which is returned by this function has to be passed to API.get_auth_token_with_code(code) to get the refresh_token and the oauth_token. The big advantage is that you don't have to run a callback server to get the code Notes: This will only work if the user has at least once accepted the scopes your app is requesting. I would recommend that you take a look at the source code of this function before you use it and that you are familiar with the authorization mechanism of spotify. Important: This method is intended for automated testing. You have to decide if you want to use it in you production environment. Args: cookies: The cookies of the spotify account. Every property of the class has to be filled in. Raises: SpotifyError: If the cookie is not valid SpotifyError: If there is a redirect between you and spotify SpotifyError: If there is an unknown error Returns: The spotify code which can be used to get a refresh_token and a oauth_token \"\"\" # Build the auth url url = self . build_authorization_url ( show_dialog = False ) # Check if the cookie file is valid if not cookies . valid : raise SpotifyError ( ErrorMessage ( message = 'The cookies are not complete' ) . __dict__ ) # Convert the class to a dict cookie_dict : dict = cookies . __dict__ return await self . _track_request_without_callback ( cookie_dict , url )","title":"get_code_with_cookie()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.next","text":"Get the next 'page' of the response Parameters: Name Type Description Default url str The next url required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The api response Source code in async_spotify/api/spotify_api_client.py 446 447 448 449 450 451 452 453 454 455 456 457 458 async def next ( self , url : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get the next 'page' of the response Args: url: The next url auth_token: The auth token if you set the api class not to keep the token in memory Returns: The api response \"\"\" return await self . _api_request_handler . make_request ( 'GET' , url , {}, auth_token )","title":"next()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.open_oauth_dialog_in_browser","text":"Open the url in browser Only for testing purposes or the usage of this library in a desktop app Parameters: Name Type Description Default show_dialogue bool Should the spotify auth dialog be shown True Source code in async_spotify/api/spotify_api_client.py 185 186 187 188 189 190 191 192 193 194 195 def open_oauth_dialog_in_browser ( self , show_dialogue : bool = True ) -> None : \"\"\" Open the url in browser Only for testing purposes or the usage of this library in a desktop app Args: show_dialogue: Should the spotify auth dialog be shown \"\"\" # Open url in a new window of the default browser, if possible webbrowser . open_new ( self . build_authorization_url ( show_dialogue ))","title":"open_oauth_dialog_in_browser()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.previous","text":"Get the next 'previous' of the response Parameters: Name Type Description Default url str The previous url required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The api response Source code in async_spotify/api/spotify_api_client.py 460 461 462 463 464 465 466 467 468 469 470 471 472 async def previous ( self , url : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get the next 'previous' of the response Args: url: The previous url auth_token: The auth token if you set the api class not to keep the token in memory Returns: The api response \"\"\" return await self . _api_request_handler . make_request ( 'GET' , url , {}, auth_token )","title":"previous()"},{"location":"public_api/spotify_api_client/#async_spotify.api.spotify_api_client.SpotifyApiClient.refresh_token","text":"Refresh the auth token with the refresh token or get a new auth token and refresh token with the code returned by the spotify auth flow. Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The refresh token or the code returned by the spotify auth flow. Leave empty if you enabled hold_authentication. Then the internal token will be used. None Notes https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow Returns: Type Description SpotifyAuthorisationToken The SpotifyAuthorisationToken Source code in async_spotify/api/spotify_api_client.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 async def refresh_token ( self , auth_token : SpotifyAuthorisationToken = None ) -> SpotifyAuthorisationToken : \"\"\" Refresh the auth token with the refresh token or get a new auth token and refresh token with the code returned by the spotify auth flow. Args: auth_token: The refresh token or the code returned by the spotify auth flow. Leave empty if you enabled hold_authentication. Then the internal token will be used. Notes: https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow Returns: The SpotifyAuthorisationToken \"\"\" self . _enforce_flows () # Check if the internal auth token should be used if not auth_token and self . _hold_authentication : auth_token = self . _spotify_authorisation_token body : dict = { 'grant_type' : 'refresh_token' , 'refresh_token' : auth_token . refresh_token } response_json : dict = await self . _make_auth_api_request ( body ) refresh_token = auth_token . refresh_token access_token = response_json [ 'access_token' ] # Keep the auth token in memory self . _spotify_authorisation_token . refresh_token = refresh_token self . _spotify_authorisation_token . activation_time = int ( time . time ()) self . _spotify_authorisation_token . access_token = access_token return deepcopy ( self . _spotify_authorisation_token )","title":"refresh_token()"},{"location":"public_api/spotify_errors/","text":"\u00b6 File with all the errors possible. Every Exception inherits from SpotifyBaseError and therefor implements the get_json method. Which should be used to get api response if a SpotifyAPIError is raised or should be used to get the other general error message RateLimitExceeded \u00b6 Custom rate limit exceeded exception SpotifyAPIError \u00b6 Custom api error message This exception gets throws if the spotify api returns an non success return code SpotifyBaseError \u00b6 The base Error for all spotify exceptions get_json ( self ) \u00b6 Get the the api response which was an error as dict {\"error\":{\"status\": 400, \"message\": \"The reason\"}} Source code in async_spotify/spotify_errors.py 28 29 30 31 32 33 def get_json ( self ) -> Dict [ str , Dict [ str , str ]]: \"\"\" Get the the api response which was an error as dict {\"error\":{\"status\": 400, \"message\": \"The reason\"}} \"\"\" return self . message SpotifyError \u00b6 Custom error message TokenExpired \u00b6 Custom token expired message","title":"Spotify Errors"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors","text":"File with all the errors possible. Every Exception inherits from SpotifyBaseError and therefor implements the get_json method. Which should be used to get api response if a SpotifyAPIError is raised or should be used to get the other general error message","title":"async_spotify.spotify_errors"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors.RateLimitExceeded","text":"Custom rate limit exceeded exception","title":"RateLimitExceeded"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors.SpotifyAPIError","text":"Custom api error message This exception gets throws if the spotify api returns an non success return code","title":"SpotifyAPIError"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors.SpotifyBaseError","text":"The base Error for all spotify exceptions","title":"SpotifyBaseError"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors.SpotifyBaseError.get_json","text":"Get the the api response which was an error as dict {\"error\":{\"status\": 400, \"message\": \"The reason\"}} Source code in async_spotify/spotify_errors.py 28 29 30 31 32 33 def get_json ( self ) -> Dict [ str , Dict [ str , str ]]: \"\"\" Get the the api response which was an error as dict {\"error\":{\"status\": 400, \"message\": \"The reason\"}} \"\"\" return self . message","title":"get_json()"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors.SpotifyError","text":"Custom error message","title":"SpotifyError"},{"location":"public_api/spotify_errors/#async_spotify.spotify_errors.TokenExpired","text":"Custom token expired message","title":"TokenExpired"},{"location":"public_api/token_renew_class/","text":"If you want to add a hook to update the Api token automatically you can do this by passing your own class to the SpotifyApiClient . Your class has to extend the TokenRenewClass and provide an async __call__() method which returns the new Auth Token . \u00b6 TokenRenewClass \u00b6 Class which describes the interfaces the Token renew class has and can also be used to handle basic token renewal __call__ ( self , spotify_api_client ) special \u00b6 Async method which gets called if the token is expired Parameters: Name Type Description Default spotify_api_client The instance of the [ SpotifyApiClient ][async_spotify.api.spotify_api_client] required Returns: A renewed spotify authorization token Source code in async_spotify/token_renew_class.py 16 17 18 19 20 21 22 23 24 25 26 async def __call__ ( self , spotify_api_client ) -> SpotifyAuthorisationToken : \"\"\" **Async** method which gets called if the token is expired Args: spotify_api_client: The instance of the [`SpotifyApiClient`][async_spotify.api.spotify_api_client] Returns: A renewed spotify authorization token \"\"\" return await spotify_api_client . refresh_token ()","title":"Token Renew Hook"},{"location":"public_api/token_renew_class/#async_spotify.token_renew_class","text":"","title":"async_spotify.token_renew_class"},{"location":"public_api/token_renew_class/#async_spotify.token_renew_class.TokenRenewClass","text":"Class which describes the interfaces the Token renew class has and can also be used to handle basic token renewal","title":"TokenRenewClass"},{"location":"public_api/token_renew_class/#async_spotify.token_renew_class.TokenRenewClass.__call__","text":"Async method which gets called if the token is expired Parameters: Name Type Description Default spotify_api_client The instance of the [ SpotifyApiClient ][async_spotify.api.spotify_api_client] required Returns: A renewed spotify authorization token Source code in async_spotify/token_renew_class.py 16 17 18 19 20 21 22 23 24 25 26 async def __call__ ( self , spotify_api_client ) -> SpotifyAuthorisationToken : \"\"\" **Async** method which gets called if the token is expired Args: spotify_api_client: The instance of the [`SpotifyApiClient`][async_spotify.api.spotify_api_client] Returns: A renewed spotify authorization token \"\"\" return await spotify_api_client . refresh_token ()","title":"__call__()"},{"location":"public_api/endpoints/albums/","text":"\u00b6 Module with the albums endpoint Albums \u00b6 Wraps the spotify album endpoint get_multiple ( self , album_id_list , auth_token = None , ** kwargs ) \u00b6 Get All the albums specified in the album_id_list Parameters: Name Type Description Default album_id_list List[str] The list of the spotify album ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/albums/get-several-albums/ Returns: Type Description dict All the albums you queried Source code in async_spotify/api/_endpoints/albums.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def get_multiple ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get All the albums specified in the album_id_list Args: album_id_list: The list of the spotify album ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: https://developer.spotify.com/documentation/web-api/reference/albums/get-several-albums/ Returns: All the albums you queried \"\"\" required_args = { \"ids\" : album_id_list } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ALBUM . MULTIPLE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_one ( self , album_id , auth_token = None , ** kwargs ) \u00b6 Get the album with the specific spotify album id Parameters: Name Type Description Default album_id str The album id of the album you want to get required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/albums/get-album/ Returns: Type Description dict The album json Source code in async_spotify/api/_endpoints/albums.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def get_one ( self , album_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the album with the specific spotify album id Args: album_id: The album id of the album you want to get auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/albums/get-album/](https://developer.spotify.com/documentation/web-api/reference/albums/get-album/) Returns: The album json \"\"\" required_args = { \"id\" : album_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ALBUM . ONE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_tracks ( self , album_id , auth_token = None , ** kwargs ) \u00b6 Get the tracks of an album Parameters: Name Type Description Default album_id str The id of the album required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/albums/get-albums-tracks/ Returns: Type Description dict The tracks of an album Source code in async_spotify/api/_endpoints/albums.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def get_tracks ( self , album_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the tracks of an album Args: album_id: The id of the album auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: https://developer.spotify.com/documentation/web-api/reference/albums/get-albums-tracks/ Returns: The tracks of an album \"\"\" required_args = { \"id\" : album_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ALBUM . TRACKS , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"Albums"},{"location":"public_api/endpoints/albums/#async_spotify.api._endpoints.albums","text":"Module with the albums endpoint","title":"async_spotify.api._endpoints.albums"},{"location":"public_api/endpoints/albums/#async_spotify.api._endpoints.albums.Albums","text":"Wraps the spotify album endpoint","title":"Albums"},{"location":"public_api/endpoints/albums/#async_spotify.api._endpoints.albums.Albums.get_multiple","text":"Get All the albums specified in the album_id_list Parameters: Name Type Description Default album_id_list List[str] The list of the spotify album ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/albums/get-several-albums/ Returns: Type Description dict All the albums you queried Source code in async_spotify/api/_endpoints/albums.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def get_multiple ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get All the albums specified in the album_id_list Args: album_id_list: The list of the spotify album ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: https://developer.spotify.com/documentation/web-api/reference/albums/get-several-albums/ Returns: All the albums you queried \"\"\" required_args = { \"ids\" : album_id_list } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ALBUM . MULTIPLE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_multiple()"},{"location":"public_api/endpoints/albums/#async_spotify.api._endpoints.albums.Albums.get_one","text":"Get the album with the specific spotify album id Parameters: Name Type Description Default album_id str The album id of the album you want to get required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/albums/get-album/ Returns: Type Description dict The album json Source code in async_spotify/api/_endpoints/albums.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def get_one ( self , album_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the album with the specific spotify album id Args: album_id: The album id of the album you want to get auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/albums/get-album/](https://developer.spotify.com/documentation/web-api/reference/albums/get-album/) Returns: The album json \"\"\" required_args = { \"id\" : album_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ALBUM . ONE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_one()"},{"location":"public_api/endpoints/albums/#async_spotify.api._endpoints.albums.Albums.get_tracks","text":"Get the tracks of an album Parameters: Name Type Description Default album_id str The id of the album required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/albums/get-albums-tracks/ Returns: Type Description dict The tracks of an album Source code in async_spotify/api/_endpoints/albums.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def get_tracks ( self , album_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the tracks of an album Args: album_id: The id of the album auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: https://developer.spotify.com/documentation/web-api/reference/albums/get-albums-tracks/ Returns: The tracks of an album \"\"\" required_args = { \"id\" : album_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ALBUM . TRACKS , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_tracks()"},{"location":"public_api/endpoints/artists/","text":"\u00b6 Module with the artists endpoint Artists \u00b6 Wraps the spotify artist endpoint get_album_list ( self , artist_id , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information about an artist\u2019s albums. Parameters: Name Type Description Default artist_id str The artist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-albums/ Returns: Type Description dict The artists albums Source code in async_spotify/api/_endpoints/artists.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def get_album_list ( self , artist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about an artist\u2019s albums. Args: artist_id: The artist id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-albums/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-albums/) Returns: The artists albums \"\"\" required_args = { \"id\" : artist_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . ALBUM , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_one ( self , artist_id , auth_token = None , ** kwargs ) \u00b6 Get an Artist Parameters: Name Type Description Default artist_id str The artist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/ Returns: Type Description dict The artist Source code in async_spotify/api/_endpoints/artists.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def get_one ( self , artist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get an Artist Args: artist_id: The artist id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/) Returns: The artist \"\"\" required_args = { \"id\" : artist_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . ONE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_several ( self , artist_id_list , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information for several artists based on their Spotify IDs. Parameters: Name Type Description Default artist_id_list List[str] The artist ids in a list required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/ Returns: Type Description dict Several artists Source code in async_spotify/api/_endpoints/artists.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 async def get_several ( self , artist_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for several artists based on their Spotify IDs. Args: artist_id_list: The artist ids in a list auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/](https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/) Returns: Several artists \"\"\" required_args = { \"ids\" : artist_id_list } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . SEVERAL , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_similar ( self , artist_id , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\u2019s listening history. Parameters: Name Type Description Default artist_id str The artist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/ Returns: Type Description dict The artists top tracks Source code in async_spotify/api/_endpoints/artists.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 async def get_similar ( self , artist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\u2019s listening history. Args: artist_id: The artist id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/) Returns: The artists top tracks \"\"\" required_args = { \"id\" : artist_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . SIMILAR_ARTISTS , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_top_tracks ( self , artist_id , country , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information about an artist\u2019s top tracks by country. Parameters: Name Type Description Default artist_id str The artist id required country str The country of the top tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/ Returns: Type Description dict The artists top tracks Source code in async_spotify/api/_endpoints/artists.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 async def get_top_tracks ( self , artist_id : str , country : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about an artist\u2019s top tracks by country. Args: artist_id: The artist id country: The country of the top tracks auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/) Returns: The artists top tracks \"\"\" required_args = { \"id\" : artist_id , \"country\" : country } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . TOP_TRACKS , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"Artists"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists","text":"Module with the artists endpoint","title":"async_spotify.api._endpoints.artists"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists.Artists","text":"Wraps the spotify artist endpoint","title":"Artists"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists.Artists.get_album_list","text":"Get Spotify catalog information about an artist\u2019s albums. Parameters: Name Type Description Default artist_id str The artist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-albums/ Returns: Type Description dict The artists albums Source code in async_spotify/api/_endpoints/artists.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def get_album_list ( self , artist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about an artist\u2019s albums. Args: artist_id: The artist id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-albums/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-albums/) Returns: The artists albums \"\"\" required_args = { \"id\" : artist_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . ALBUM , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_album_list()"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists.Artists.get_one","text":"Get an Artist Parameters: Name Type Description Default artist_id str The artist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/ Returns: Type Description dict The artist Source code in async_spotify/api/_endpoints/artists.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def get_one ( self , artist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get an Artist Args: artist_id: The artist id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/) Returns: The artist \"\"\" required_args = { \"id\" : artist_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . ONE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_one()"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists.Artists.get_several","text":"Get Spotify catalog information for several artists based on their Spotify IDs. Parameters: Name Type Description Default artist_id_list List[str] The artist ids in a list required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/ Returns: Type Description dict Several artists Source code in async_spotify/api/_endpoints/artists.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 async def get_several ( self , artist_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for several artists based on their Spotify IDs. Args: artist_id_list: The artist ids in a list auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/](https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/) Returns: Several artists \"\"\" required_args = { \"ids\" : artist_id_list } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . SEVERAL , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_several()"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists.Artists.get_similar","text":"Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\u2019s listening history. Parameters: Name Type Description Default artist_id str The artist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/ Returns: Type Description dict The artists top tracks Source code in async_spotify/api/_endpoints/artists.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 async def get_similar ( self , artist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\u2019s listening history. Args: artist_id: The artist id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/) Returns: The artists top tracks \"\"\" required_args = { \"id\" : artist_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . SIMILAR_ARTISTS , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_similar()"},{"location":"public_api/endpoints/artists/#async_spotify.api._endpoints.artists.Artists.get_top_tracks","text":"Get Spotify catalog information about an artist\u2019s top tracks by country. Parameters: Name Type Description Default artist_id str The artist id required country str The country of the top tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/ Returns: Type Description dict The artists top tracks Source code in async_spotify/api/_endpoints/artists.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 async def get_top_tracks ( self , artist_id : str , country : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about an artist\u2019s top tracks by country. Args: artist_id: The artist id country: The country of the top tracks auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/) Returns: The artists top tracks \"\"\" required_args = { \"id\" : artist_id , \"country\" : country } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . ARTIST . TOP_TRACKS , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_top_tracks()"},{"location":"public_api/endpoints/browse/","text":"\u00b6 Module with the browse endpoint Browse \u00b6 The browser endpoint of the api get_categories ( self , auth_token = None , ** kwargs ) \u00b6 Get a List of Browse Categories Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-browse-categories/ Returns: Type Description dict The available categories Source code in async_spotify/api/_endpoints/browse.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 async def get_categories ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a List of Browse Categories Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-browse-categories/](https://developer.spotify.com/console/get-browse-categories/) Returns: The available categories \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . CATEGORY_LIST , args , auth_token ) return response get_category_playlists ( self , category_id , auth_token = None , ** kwargs ) \u00b6 Get a Category's playlists Parameters: Name Type Description Default category_id str The category id of the category you want required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-category-playlists/ Returns: Type Description dict The playlists of a category Source code in async_spotify/api/_endpoints/browse.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 async def get_category_playlists ( self , category_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a Category's playlists Args: category_id: The category id of the category you want auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-category-playlists/](https://developer.spotify.com/console/get-category-playlists/) Returns: The playlists of a category \"\"\" required_args = { \"category_id\" : category_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . BROWSE . CATEGORY_PLAYLIST , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response get_featured_playlists ( self , auth_token = None , ** kwargs ) \u00b6 Get a List of Featured Playlists Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-featured-playlists/ Returns: Type Description dict The featured playlists Source code in async_spotify/api/_endpoints/browse.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 async def get_featured_playlists ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a List of Featured Playlists Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-featured-playlists/](https://developer.spotify.com/console/get-featured-playlists/) Returns: The featured playlists \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . FEATURED_PLAYLISTS , args , auth_token ) return response get_genre_seeds ( self , auth_token = None ) \u00b6 Get Available Genre Seeds Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Notes https://developer.spotify.com/console/get-available-genre-seeds/ Returns: Type Description dict List of Genres Source code in async_spotify/api/_endpoints/browse.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 async def get_genre_seeds ( self , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get Available Genre Seeds Args: auth_token: The auth token if you set the api class not to keep the token in memory Notes: [https://developer.spotify.com/console/get-available-genre-seeds/](https://developer.spotify.com/console/get-available-genre-seeds/) Returns: List of Genres \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . GENRE_SEEDS , {}, auth_token ) get_new_releases ( self , auth_token = None , ** kwargs ) \u00b6 Get a List of New Releases Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-new-releases/ Returns: Type Description dict A list of new releases Source code in async_spotify/api/_endpoints/browse.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 async def get_new_releases ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a List of New Releases Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-new-releases/](https://developer.spotify.com/console/get-new-releases/) Returns: A list of new releases \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . RELEASES , args , auth_token ) return response get_recommendation_by_seed ( self , auth_token = None , ** kwargs ) \u00b6 Get Recommendations Based on Seeds Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-recommendations/ Returns: Type Description dict The Available Genre Seeds Source code in async_spotify/api/_endpoints/browse.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 async def get_recommendation_by_seed ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Recommendations Based on Seeds Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-recommendations/](https://developer.spotify.com/console/get-recommendations/) Returns: The Available Genre Seeds \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . RECOMMENDATIONS , args , auth_token ) return response get_single_category ( self , category_id , auth_token = None , ** kwargs ) \u00b6 Get a Single Browse Category Parameters: Name Type Description Default category_id str The category id of the category you want required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-browse-category/ Returns: Type Description dict A single category Source code in async_spotify/api/_endpoints/browse.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 async def get_single_category ( self , category_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a Single Browse Category Args: category_id: The category id of the category you want auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-browse-category/](https://developer.spotify.com/console/get-browse-category/) Returns: A single category \"\"\" required_args = { \"category_id\" : category_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . BROWSE . CATEGORY , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"Browse"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse","text":"Module with the browse endpoint","title":"async_spotify.api._endpoints.browse"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse","text":"The browser endpoint of the api","title":"Browse"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_categories","text":"Get a List of Browse Categories Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-browse-categories/ Returns: Type Description dict The available categories Source code in async_spotify/api/_endpoints/browse.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 async def get_categories ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a List of Browse Categories Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-browse-categories/](https://developer.spotify.com/console/get-browse-categories/) Returns: The available categories \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . CATEGORY_LIST , args , auth_token ) return response","title":"get_categories()"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_category_playlists","text":"Get a Category's playlists Parameters: Name Type Description Default category_id str The category id of the category you want required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-category-playlists/ Returns: Type Description dict The playlists of a category Source code in async_spotify/api/_endpoints/browse.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 async def get_category_playlists ( self , category_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a Category's playlists Args: category_id: The category id of the category you want auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-category-playlists/](https://developer.spotify.com/console/get-category-playlists/) Returns: The playlists of a category \"\"\" required_args = { \"category_id\" : category_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . BROWSE . CATEGORY_PLAYLIST , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_category_playlists()"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_featured_playlists","text":"Get a List of Featured Playlists Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-featured-playlists/ Returns: Type Description dict The featured playlists Source code in async_spotify/api/_endpoints/browse.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 async def get_featured_playlists ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a List of Featured Playlists Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-featured-playlists/](https://developer.spotify.com/console/get-featured-playlists/) Returns: The featured playlists \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . FEATURED_PLAYLISTS , args , auth_token ) return response","title":"get_featured_playlists()"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_genre_seeds","text":"Get Available Genre Seeds Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Notes https://developer.spotify.com/console/get-available-genre-seeds/ Returns: Type Description dict List of Genres Source code in async_spotify/api/_endpoints/browse.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 async def get_genre_seeds ( self , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get Available Genre Seeds Args: auth_token: The auth token if you set the api class not to keep the token in memory Notes: [https://developer.spotify.com/console/get-available-genre-seeds/](https://developer.spotify.com/console/get-available-genre-seeds/) Returns: List of Genres \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . GENRE_SEEDS , {}, auth_token )","title":"get_genre_seeds()"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_new_releases","text":"Get a List of New Releases Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-new-releases/ Returns: Type Description dict A list of new releases Source code in async_spotify/api/_endpoints/browse.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 async def get_new_releases ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a List of New Releases Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-new-releases/](https://developer.spotify.com/console/get-new-releases/) Returns: A list of new releases \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . RELEASES , args , auth_token ) return response","title":"get_new_releases()"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_recommendation_by_seed","text":"Get Recommendations Based on Seeds Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-recommendations/ Returns: Type Description dict The Available Genre Seeds Source code in async_spotify/api/_endpoints/browse.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 async def get_recommendation_by_seed ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Recommendations Based on Seeds Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-recommendations/](https://developer.spotify.com/console/get-recommendations/) Returns: The Available Genre Seeds \"\"\" args = { ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . BROWSE . RECOMMENDATIONS , args , auth_token ) return response","title":"get_recommendation_by_seed()"},{"location":"public_api/endpoints/browse/#async_spotify.api._endpoints.browse.Browse.get_single_category","text":"Get a Single Browse Category Parameters: Name Type Description Default category_id str The category id of the category you want required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Notes https://developer.spotify.com/console/get-browse-category/ Returns: Type Description dict A single category Source code in async_spotify/api/_endpoints/browse.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 async def get_single_category ( self , category_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a Single Browse Category Args: category_id: The category id of the category you want auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Notes: [https://developer.spotify.com/console/get-browse-category/](https://developer.spotify.com/console/get-browse-category/) Returns: A single category \"\"\" required_args = { \"category_id\" : category_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . BROWSE . CATEGORY , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_single_category()"},{"location":"public_api/endpoints/episodes/","text":"\u00b6 Module with the episodes endpoint Episodes \u00b6 Class with the episodes endpoint get_multiple ( self , episode_ids , auth_token = None , ** kwargs ) \u00b6 Get Several Episodes Notes https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/ Parameters: Name Type Description Default episode_ids List[str] A list of episode ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A list of episodes Source code in async_spotify/api/_endpoints/episodes.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 async def get_multiple ( self , episode_ids : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Several Episodes Notes: [https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) Args: episode_ids: A list of episode ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A list of episodes \"\"\" required_args = { \"ids\" : episode_ids } args = { ** required_args , ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . EPISODES . MULTIPLE , args , auth_token ) return response get_one ( self , episode_id , auth_token = None , ** kwargs ) \u00b6 Get an Episode Notes https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/ Parameters: Name Type Description Default episode_id str The id of the episode required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A episode Source code in async_spotify/api/_endpoints/episodes.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 async def get_one ( self , episode_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get an Episode Notes: [https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) Args: episode_id: The id of the episode auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A episode \"\"\" required_args = { \"id\" : episode_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . EPISODES . ONE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"Episodes"},{"location":"public_api/endpoints/episodes/#async_spotify.api._endpoints.episodes","text":"Module with the episodes endpoint","title":"async_spotify.api._endpoints.episodes"},{"location":"public_api/endpoints/episodes/#async_spotify.api._endpoints.episodes.Episodes","text":"Class with the episodes endpoint","title":"Episodes"},{"location":"public_api/endpoints/episodes/#async_spotify.api._endpoints.episodes.Episodes.get_multiple","text":"Get Several Episodes Notes https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/ Parameters: Name Type Description Default episode_ids List[str] A list of episode ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A list of episodes Source code in async_spotify/api/_endpoints/episodes.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 async def get_multiple ( self , episode_ids : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Several Episodes Notes: [https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) Args: episode_ids: A list of episode ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A list of episodes \"\"\" required_args = { \"ids\" : episode_ids } args = { ** required_args , ** kwargs } response = await self . api_request_handler . make_request ( 'GET' , URLS . EPISODES . MULTIPLE , args , auth_token ) return response","title":"get_multiple()"},{"location":"public_api/endpoints/episodes/#async_spotify.api._endpoints.episodes.Episodes.get_one","text":"Get an Episode Notes https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/ Parameters: Name Type Description Default episode_id str The id of the episode required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A episode Source code in async_spotify/api/_endpoints/episodes.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 async def get_one ( self , episode_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get an Episode Notes: [https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) Args: episode_id: The id of the episode auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A episode \"\"\" required_args = { \"id\" : episode_id } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . EPISODES . ONE , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_one()"},{"location":"public_api/endpoints/follow/","text":"\u00b6 Module with the follow endpoint Follow \u00b6 Class with the follow endpoint check_follow ( self , follow_type , id_list , auth_token = None ) \u00b6 Check to see if the current user is following one or more artists or other Spotify users. Notes https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/ Parameters: Name Type Description Default follow_type str The follow type (user or artist) required id_list List[str] A comma-separated list of the artist or the user Spotify IDs to check. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict A bool value Source code in async_spotify/api/_endpoints/follow.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 async def check_follow ( self , follow_type : str , id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Check to see if the current user is following one or more artists or other Spotify users. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/](https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/) Args: follow_type: The follow type (user or artist) id_list: A comma-separated list of the artist or the user Spotify IDs to check. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"type\" : follow_type , \"ids\" : id_list } response = await self . api_request_handler . make_request ( 'GET' , URLS . FOLLOW . CONTAINS , required_args , auth_token ) return response check_follow_playlist ( self , playlist_id , spotify_user_id_list , auth_token = None ) \u00b6 Check to see if one or more Spotify users are following a specified playlist. Notes https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/ Parameters: Name Type Description Default playlist_id str The id of the playlist required spotify_user_id_list List[str] A comma-separated list of the artist or the user Spotify IDs to check. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] A bool value Source code in async_spotify/api/_endpoints/follow.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 async def check_follow_playlist ( self , playlist_id : str , spotify_user_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> List [ bool ]: \"\"\" Check to see if one or more Spotify users are following a specified playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/](https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/) Args: playlist_id: The id of the playlist spotify_user_id_list: A comma-separated list of the artist or the user Spotify IDs to check. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"playlist_id\" : playlist_id , \"ids\" : spotify_user_id_list } url , args = self . _add_url_params ( URLS . FOLLOW . CONTAINS_PLAYLIST , required_args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response follow_artist_or_user ( self , follow_type , spotify_user_id_list , auth_token = None ) \u00b6 Check to see if the current user is following one or more artists or other Spotify users. Notes https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/ Parameters: Name Type Description Default follow_type str The follow type (user or artist) required spotify_user_id_list List[str] A comma-separated list of the artist or the user Spotify IDs required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 async def follow_artist_or_user ( self , follow_type : str , spotify_user_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Check to see if the current user is following one or more artists or other Spotify users. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/](https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/) Args: follow_type: The follow type (user or artist) spotify_user_id_list: A comma-separated list of the artist or the user Spotify IDs auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"type\" : follow_type , \"ids\" : spotify_user_id_list } await self . api_request_handler . make_request ( 'PUT' , URLS . FOLLOW . HUMAN , required_args , auth_token ) follow_playlist ( self , playlist_id , public = True , auth_token = None ) \u00b6 Add the current user as a follower of a playlist. Notes https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/ Parameters: Name Type Description Default playlist_id str The playlist id required public Defaults to true. If true the playlist will be included in user\u2019s public playlists, if false it will remain private. True auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 async def follow_playlist ( self , playlist_id : str , public = True , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Add the current user as a follower of a playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/](https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/) Args: playlist_id: The playlist id public: Defaults to true. If true the playlist will be included in user\u2019s public playlists, if false it will remain private. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { 'playlist_id' : playlist_id } url , _ = self . _add_url_params ( URLS . FOLLOW . PLAYLIST , required_args ) body : dict = { \"public\" : public } await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body ) get_followed_artist ( self , follow_type = 'artist' , auth_token = None , ** kwargs ) \u00b6 Get the current user\u2019s followed artists. Notes https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/ Parameters: Name Type Description Default follow_type str The ID type: currently artist 'artist' auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The followed artists Source code in async_spotify/api/_endpoints/follow.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 async def get_followed_artist ( self , follow_type : str = 'artist' , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the current user\u2019s followed artists. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/](https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/) Args: follow_type: The ID type: currently artist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The followed artists \"\"\" required_args = { 'type' : follow_type } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . FOLLOW . HUMAN , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response unfollow_artist_or_user ( self , follow_type , spotify_user_id_list , auth_token = None ) \u00b6 Unfollow Artists or Users Notes https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/ Parameters: Name Type Description Default follow_type str The follow type (user or artist) required spotify_user_id_list List[str] A comma-separated list of the artist or the user Spotify IDs required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 async def unfollow_artist_or_user ( self , follow_type : str , spotify_user_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Unfollow Artists or Users Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/) Args: follow_type: The follow type (user or artist) spotify_user_id_list: A comma-separated list of the artist or the user Spotify IDs auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"type\" : follow_type , \"ids\" : spotify_user_id_list } await self . api_request_handler . make_request ( 'DELETE' , URLS . FOLLOW . HUMAN , required_args , auth_token ) unfollow_playlist ( self , playlist_id , auth_token = None ) \u00b6 Unfollow a Playlist Notes https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/ Parameters: Name Type Description Default playlist_id str The playlist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 async def unfollow_playlist ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Unfollow a Playlist Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/) Args: playlist_id: The playlist id auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"playlist_id\" : playlist_id } url , _ = self . _add_url_params ( URLS . FOLLOW . PLAYLIST , required_args ) await self . api_request_handler . make_request ( 'DELETE' , url , required_args , auth_token )","title":"Follow"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow","text":"Module with the follow endpoint","title":"async_spotify.api._endpoints.follow"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow","text":"Class with the follow endpoint","title":"Follow"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.check_follow","text":"Check to see if the current user is following one or more artists or other Spotify users. Notes https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/ Parameters: Name Type Description Default follow_type str The follow type (user or artist) required id_list List[str] A comma-separated list of the artist or the user Spotify IDs to check. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict A bool value Source code in async_spotify/api/_endpoints/follow.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 async def check_follow ( self , follow_type : str , id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Check to see if the current user is following one or more artists or other Spotify users. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/](https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/) Args: follow_type: The follow type (user or artist) id_list: A comma-separated list of the artist or the user Spotify IDs to check. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"type\" : follow_type , \"ids\" : id_list } response = await self . api_request_handler . make_request ( 'GET' , URLS . FOLLOW . CONTAINS , required_args , auth_token ) return response","title":"check_follow()"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.check_follow_playlist","text":"Check to see if one or more Spotify users are following a specified playlist. Notes https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/ Parameters: Name Type Description Default playlist_id str The id of the playlist required spotify_user_id_list List[str] A comma-separated list of the artist or the user Spotify IDs to check. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] A bool value Source code in async_spotify/api/_endpoints/follow.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 async def check_follow_playlist ( self , playlist_id : str , spotify_user_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> List [ bool ]: \"\"\" Check to see if one or more Spotify users are following a specified playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/](https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/) Args: playlist_id: The id of the playlist spotify_user_id_list: A comma-separated list of the artist or the user Spotify IDs to check. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"playlist_id\" : playlist_id , \"ids\" : spotify_user_id_list } url , args = self . _add_url_params ( URLS . FOLLOW . CONTAINS_PLAYLIST , required_args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"check_follow_playlist()"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.follow_artist_or_user","text":"Check to see if the current user is following one or more artists or other Spotify users. Notes https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/ Parameters: Name Type Description Default follow_type str The follow type (user or artist) required spotify_user_id_list List[str] A comma-separated list of the artist or the user Spotify IDs required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 async def follow_artist_or_user ( self , follow_type : str , spotify_user_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Check to see if the current user is following one or more artists or other Spotify users. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/](https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/) Args: follow_type: The follow type (user or artist) spotify_user_id_list: A comma-separated list of the artist or the user Spotify IDs auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"type\" : follow_type , \"ids\" : spotify_user_id_list } await self . api_request_handler . make_request ( 'PUT' , URLS . FOLLOW . HUMAN , required_args , auth_token )","title":"follow_artist_or_user()"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.follow_playlist","text":"Add the current user as a follower of a playlist. Notes https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/ Parameters: Name Type Description Default playlist_id str The playlist id required public Defaults to true. If true the playlist will be included in user\u2019s public playlists, if false it will remain private. True auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 async def follow_playlist ( self , playlist_id : str , public = True , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Add the current user as a follower of a playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/](https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/) Args: playlist_id: The playlist id public: Defaults to true. If true the playlist will be included in user\u2019s public playlists, if false it will remain private. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { 'playlist_id' : playlist_id } url , _ = self . _add_url_params ( URLS . FOLLOW . PLAYLIST , required_args ) body : dict = { \"public\" : public } await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body )","title":"follow_playlist()"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.get_followed_artist","text":"Get the current user\u2019s followed artists. Notes https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/ Parameters: Name Type Description Default follow_type str The ID type: currently artist 'artist' auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The followed artists Source code in async_spotify/api/_endpoints/follow.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 async def get_followed_artist ( self , follow_type : str = 'artist' , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the current user\u2019s followed artists. Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/](https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/) Args: follow_type: The ID type: currently artist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The followed artists \"\"\" required_args = { 'type' : follow_type } args = { ** required_args , ** kwargs } url , args = self . _add_url_params ( URLS . FOLLOW . HUMAN , args ) response = await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) return response","title":"get_followed_artist()"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.unfollow_artist_or_user","text":"Unfollow Artists or Users Notes https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/ Parameters: Name Type Description Default follow_type str The follow type (user or artist) required spotify_user_id_list List[str] A comma-separated list of the artist or the user Spotify IDs required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 async def unfollow_artist_or_user ( self , follow_type : str , spotify_user_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Unfollow Artists or Users Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/) Args: follow_type: The follow type (user or artist) spotify_user_id_list: A comma-separated list of the artist or the user Spotify IDs auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"type\" : follow_type , \"ids\" : spotify_user_id_list } await self . api_request_handler . make_request ( 'DELETE' , URLS . FOLLOW . HUMAN , required_args , auth_token )","title":"unfollow_artist_or_user()"},{"location":"public_api/endpoints/follow/#async_spotify.api._endpoints.follow.Follow.unfollow_playlist","text":"Unfollow a Playlist Notes https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/ Parameters: Name Type Description Default playlist_id str The playlist id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description None A bool value Source code in async_spotify/api/_endpoints/follow.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 async def unfollow_playlist ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Unfollow a Playlist Notes: [https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/) Args: playlist_id: The playlist id auth_token: The auth token if you set the api class not to keep the token in memory Returns: A bool value \"\"\" required_args = { \"playlist_id\" : playlist_id } url , _ = self . _add_url_params ( URLS . FOLLOW . PLAYLIST , required_args ) await self . api_request_handler . make_request ( 'DELETE' , url , required_args , auth_token )","title":"unfollow_playlist()"},{"location":"public_api/endpoints/library/","text":"\u00b6 Module with the library endpoint Library \u00b6 Library endpoint add_album ( self , album_id_list , auth_token = None ) \u00b6 Get User's Saved Albums Notes https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/ Parameters: Name Type Description Default album_id_list List[str] The ids of the albums required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 async def add_album ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Get User's Saved Albums Notes: [https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/](https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/) Args: album_id_list: The ids of the albums auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . LIBRARY . ALBUMS , { ** { 'ids' : album_id_list }}, auth_token ) add_shows ( self , show_id_list , auth_token = None ) \u00b6 Get User's Saved Shows Notes https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/ Parameters: Name Type Description Default show_id_list List[str] The ids of the shows required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 184 185 186 187 188 189 190 191 192 193 194 195 196 197 async def add_shows ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Get User's Saved Shows Notes: [https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) Args: show_id_list: The ids of the shows auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . LIBRARY . SHOWS , { ** { 'ids' : show_id_list }}, auth_token ) add_tracks ( self , track_id_list , auth_token = None ) \u00b6 Get User's Saved Tracks Notes https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/ Parameters: Name Type Description Default track_id_list List[str] The ids of the tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 async def add_tracks ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Get User's Saved Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/](https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/) Args: track_id_list: The ids of the tracks auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . LIBRARY . TRACKS , { ** { 'ids' : track_id_list }}, auth_token ) contains_albums ( self , album_id_list , auth_token = None ) \u00b6 Check Current User's Saved Albums Notes https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/ Parameters: Name Type Description Default album_id_list List[str] The ids of the albums required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] Does the user library contain the Album Source code in async_spotify/api/_endpoints/library.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 async def contains_albums ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) \\ -> List [ bool ]: \"\"\" Check Current User's Saved Albums Notes: [https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/) Args: album_id_list: The ids of the albums auth_token: The auth token if you set the api class not to keep the token in memory Returns: Does the user library contain the Album \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . CONTAINS_ALBUM , { 'ids' : album_id_list }, auth_token ) contains_shows ( self , show_id_list , auth_token = None ) \u00b6 Check Current User's Saved Shows Notes https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/ Parameters: Name Type Description Default show_id_list List[str] required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] Does the user library contain the Show Source code in async_spotify/api/_endpoints/library.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 async def contains_shows ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> List [ bool ]: \"\"\" Check Current User's Saved Shows Notes: [https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) Args: show_id_list: auth_token: The auth token if you set the api class not to keep the token in memory Returns: Does the user library contain the Show \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . CONTAINS_SHOWS , { 'ids' : show_id_list }, auth_token ) contains_tracks ( self , track_id_list , auth_token = None ) \u00b6 Check Current User's Saved Tracks Notes https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/ Parameters: Name Type Description Default track_id_list List[str] required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] Does the user library contain the Track Source code in async_spotify/api/_endpoints/library.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 async def contains_tracks ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) \\ -> List [ bool ]: \"\"\" Check Current User's Saved Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/) Args: track_id_list: auth_token: The auth token if you set the api class not to keep the token in memory Returns: Does the user library contain the Track \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . CONTAINS_TRACK , { 'ids' : track_id_list }, auth_token ) get_albums ( self , auth_token = None , ** kwargs ) \u00b6 Check User's Saved Albums Notes https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 80 81 82 83 84 85 86 87 88 89 90 91 92 async def get_albums ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Check User's Saved Albums Notes: [https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . ALBUMS , kwargs , auth_token ) get_shows ( self , auth_token = None , ** kwargs ) \u00b6 Check User's Saved Shows Notes https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 94 95 96 97 98 99 100 101 102 103 104 105 106 async def get_shows ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Check User's Saved Shows Notes: [https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . SHOWS , kwargs , auth_token ) get_tracks ( self , auth_token = None , ** kwargs ) \u00b6 Check User's Saved Tracks Notes https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 108 109 110 111 112 113 114 115 116 117 118 119 120 async def get_tracks ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Check User's Saved Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . TRACKS , kwargs , auth_token ) remove_albums ( self , album_id_list , auth_token = None ) \u00b6 Remove Albums for Current User Notes https://developer.spotify.com/documentation/web-api/reference/library/remove-albums-user/ Parameters: Name Type Description Default album_id_list List[str] The ids of the albums required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 async def remove_albums ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Remove Albums for Current User Notes: [https://developer.spotify.com/documentation/web-api/reference/library/remove-albums-user/](https://developer.spotify.com/documentation/web-api/reference/library/remove-albums-user/) Args: album_id_list: The ids of the albums auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'DELETE' , URLS . LIBRARY . ALBUMS , { 'ids' : album_id_list }, auth_token ) remove_shows ( self , show_id_list , auth_token = None , ** kwargs ) \u00b6 Remove Shows for Current User Notes https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/ Parameters: Name Type Description Default show_id_list List[str] The ids of the shows required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 async def remove_shows ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Remove Shows for Current User Notes: [https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) Args: show_id_list: The ids of the shows auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'DELETE' , URLS . LIBRARY . SHOWS , { ** { 'ids' : show_id_list }, ** kwargs }, auth_token ) remove_tracks ( self , track_id_list , auth_token = None ) \u00b6 Remove Tracks for Current User Notes https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/ Parameters: Name Type Description Default track_id_list List[str] The ids of the tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 async def remove_tracks ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Remove Tracks for Current User Notes: [https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/](https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/) Args: track_id_list: The ids of the tracks auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'DELETE' , URLS . LIBRARY . TRACKS , { 'ids' : track_id_list }, auth_token )","title":"Library"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library","text":"Module with the library endpoint","title":"async_spotify.api._endpoints.library"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library","text":"Library endpoint","title":"Library"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.add_album","text":"Get User's Saved Albums Notes https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/ Parameters: Name Type Description Default album_id_list List[str] The ids of the albums required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 async def add_album ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Get User's Saved Albums Notes: [https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/](https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/) Args: album_id_list: The ids of the albums auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . LIBRARY . ALBUMS , { ** { 'ids' : album_id_list }}, auth_token )","title":"add_album()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.add_shows","text":"Get User's Saved Shows Notes https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/ Parameters: Name Type Description Default show_id_list List[str] The ids of the shows required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 184 185 186 187 188 189 190 191 192 193 194 195 196 197 async def add_shows ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Get User's Saved Shows Notes: [https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) Args: show_id_list: The ids of the shows auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . LIBRARY . SHOWS , { ** { 'ids' : show_id_list }}, auth_token )","title":"add_shows()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.add_tracks","text":"Get User's Saved Tracks Notes https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/ Parameters: Name Type Description Default track_id_list List[str] The ids of the tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 async def add_tracks ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Get User's Saved Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/](https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/) Args: track_id_list: The ids of the tracks auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . LIBRARY . TRACKS , { ** { 'ids' : track_id_list }}, auth_token )","title":"add_tracks()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.contains_albums","text":"Check Current User's Saved Albums Notes https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/ Parameters: Name Type Description Default album_id_list List[str] The ids of the albums required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] Does the user library contain the Album Source code in async_spotify/api/_endpoints/library.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 async def contains_albums ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) \\ -> List [ bool ]: \"\"\" Check Current User's Saved Albums Notes: [https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/) Args: album_id_list: The ids of the albums auth_token: The auth token if you set the api class not to keep the token in memory Returns: Does the user library contain the Album \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . CONTAINS_ALBUM , { 'ids' : album_id_list }, auth_token )","title":"contains_albums()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.contains_shows","text":"Check Current User's Saved Shows Notes https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/ Parameters: Name Type Description Default show_id_list List[str] required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] Does the user library contain the Show Source code in async_spotify/api/_endpoints/library.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 async def contains_shows ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> List [ bool ]: \"\"\" Check Current User's Saved Shows Notes: [https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) Args: show_id_list: auth_token: The auth token if you set the api class not to keep the token in memory Returns: Does the user library contain the Show \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . CONTAINS_SHOWS , { 'ids' : show_id_list }, auth_token )","title":"contains_shows()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.contains_tracks","text":"Check Current User's Saved Tracks Notes https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/ Parameters: Name Type Description Default track_id_list List[str] required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description List[bool] Does the user library contain the Track Source code in async_spotify/api/_endpoints/library.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 async def contains_tracks ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) \\ -> List [ bool ]: \"\"\" Check Current User's Saved Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/) Args: track_id_list: auth_token: The auth token if you set the api class not to keep the token in memory Returns: Does the user library contain the Track \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . CONTAINS_TRACK , { 'ids' : track_id_list }, auth_token )","title":"contains_tracks()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.get_albums","text":"Check User's Saved Albums Notes https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 80 81 82 83 84 85 86 87 88 89 90 91 92 async def get_albums ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Check User's Saved Albums Notes: [https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . ALBUMS , kwargs , auth_token )","title":"get_albums()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.get_shows","text":"Check User's Saved Shows Notes https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 94 95 96 97 98 99 100 101 102 103 104 105 106 async def get_shows ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Check User's Saved Shows Notes: [https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . SHOWS , kwargs , auth_token )","title":"get_shows()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.get_tracks","text":"Check User's Saved Tracks Notes https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 108 109 110 111 112 113 114 115 116 117 118 119 120 async def get_tracks ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Check User's Saved Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . LIBRARY . TRACKS , kwargs , auth_token )","title":"get_tracks()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.remove_albums","text":"Remove Albums for Current User Notes https://developer.spotify.com/documentation/web-api/reference/library/remove-albums-user/ Parameters: Name Type Description Default album_id_list List[str] The ids of the albums required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 async def remove_albums ( self , album_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Remove Albums for Current User Notes: [https://developer.spotify.com/documentation/web-api/reference/library/remove-albums-user/](https://developer.spotify.com/documentation/web-api/reference/library/remove-albums-user/) Args: album_id_list: The ids of the albums auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'DELETE' , URLS . LIBRARY . ALBUMS , { 'ids' : album_id_list }, auth_token )","title":"remove_albums()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.remove_shows","text":"Remove Shows for Current User Notes https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/ Parameters: Name Type Description Default show_id_list List[str] The ids of the shows required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/library.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 async def remove_shows ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Remove Shows for Current User Notes: [https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) Args: show_id_list: The ids of the shows auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'DELETE' , URLS . LIBRARY . SHOWS , { ** { 'ids' : show_id_list }, ** kwargs }, auth_token )","title":"remove_shows()"},{"location":"public_api/endpoints/library/#async_spotify.api._endpoints.library.Library.remove_tracks","text":"Remove Tracks for Current User Notes https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/ Parameters: Name Type Description Default track_id_list List[str] The ids of the tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/library.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 async def remove_tracks ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Remove Tracks for Current User Notes: [https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/](https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/) Args: track_id_list: The ids of the tracks auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" await self . api_request_handler . make_request ( 'DELETE' , URLS . LIBRARY . TRACKS , { 'ids' : track_id_list }, auth_token )","title":"remove_tracks()"},{"location":"public_api/endpoints/overview/","text":"Overview \u00b6 In here are all the different endpoints which are necessary for accessing the spotify api. Each of the endpoints can only be accessed through the SpotifyApiClient . Every endpoint is an instance variable of the SpotifyApiClient . You should only interact through this way with the Endpoints. The Endpoint instance name is the name of the class in lower case. Example \u00b6 # To access the Albums endpoint use spotify_api_client . albums . whatever_method () # To access the Artist endpoint use spotify_api_client . artist . whatever_method () Available Endpoints: \u00b6 Album Artist Browse Episodes Follow Library Personalization Player Playlist Search Shows Tracks User","title":"Overview"},{"location":"public_api/endpoints/overview/#overview","text":"In here are all the different endpoints which are necessary for accessing the spotify api. Each of the endpoints can only be accessed through the SpotifyApiClient . Every endpoint is an instance variable of the SpotifyApiClient . You should only interact through this way with the Endpoints. The Endpoint instance name is the name of the class in lower case.","title":"Overview"},{"location":"public_api/endpoints/overview/#example","text":"# To access the Albums endpoint use spotify_api_client . albums . whatever_method () # To access the Artist endpoint use spotify_api_client . artist . whatever_method ()","title":"Example"},{"location":"public_api/endpoints/overview/#available-endpoints","text":"Album Artist Browse Episodes Follow Library Personalization Player Playlist Search Shows Tracks User","title":"Available Endpoints:"},{"location":"public_api/endpoints/personalization/","text":"\u00b6 Module with the personalization endpoint Personalization \u00b6 Personalization endpoint get_top ( self , content_type , auth_token = None , ** kwargs ) \u00b6 Get the current user\u2019s top artists or tracks based on calculated affinity. Notes https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/ Parameters: Name Type Description Default content_type str Do you want to have the top artists or tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The top tracks and artists Source code in async_spotify/api/_endpoints/personalization.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 async def get_top ( self , content_type : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the current user\u2019s top artists or tracks based on calculated affinity. Notes: [https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/](https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/) Args: content_type: Do you want to have the top `artists` or `tracks` auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The top tracks and artists \"\"\" url , _ = self . _add_url_params ( URLS . PERSONALIZATION . TOP , { 'type' : content_type }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token )","title":"Personalization"},{"location":"public_api/endpoints/personalization/#async_spotify.api._endpoints.personalization","text":"Module with the personalization endpoint","title":"async_spotify.api._endpoints.personalization"},{"location":"public_api/endpoints/personalization/#async_spotify.api._endpoints.personalization.Personalization","text":"Personalization endpoint","title":"Personalization"},{"location":"public_api/endpoints/personalization/#async_spotify.api._endpoints.personalization.Personalization.get_top","text":"Get the current user\u2019s top artists or tracks based on calculated affinity. Notes https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/ Parameters: Name Type Description Default content_type str Do you want to have the top artists or tracks required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The top tracks and artists Source code in async_spotify/api/_endpoints/personalization.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 async def get_top ( self , content_type : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the current user\u2019s top artists or tracks based on calculated affinity. Notes: [https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/](https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/) Args: content_type: Do you want to have the top `artists` or `tracks` auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The top tracks and artists \"\"\" url , _ = self . _add_url_params ( URLS . PERSONALIZATION . TOP , { 'type' : content_type }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token )","title":"get_top()"},{"location":"public_api/endpoints/player/","text":"\u00b6 Module with the player endpoint Player \u00b6 Player endpoint add_to_queue ( self , spotify_id , auth_token = None , ** kwargs ) \u00b6 Add an item to the end of the user\u2019s current playback queue Notes https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/ Parameters: Name Type Description Default spotify_id str A spotify id of an item required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 async def add_to_queue ( self , spotify_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Add an item to the end of the user\u2019s current playback queue Notes: [https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/](https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/) Args: spotify_id: A spotify id of an item auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args : dict = { 'uri' : spotify_id , ** kwargs } await self . api_request_handler . make_request ( 'POST' , URLS . PLAYER . QUEUE , args , auth_token ) get_current_track ( self , auth_token = None , ** kwargs ) \u00b6 Get the User's Currently Playing Track Notes https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The current track Source code in async_spotify/api/_endpoints/player.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 async def get_current_track ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the User's Currently Playing Track Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/](https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The current track \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . PLAYING , kwargs , auth_token ) get_devices ( self , auth_token = None ) \u00b6 Get information about a user\u2019s available devices. Notes https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The available devices Source code in async_spotify/api/_endpoints/player.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 async def get_devices ( self , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get information about a user\u2019s available devices. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/](https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/) Args: auth_token: The auth token if you set the api class not to keep the token in memory Returns: The available devices \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . DEVICES , {}, auth_token ) get_queue ( self , auth_token = None , ** kwargs ) \u00b6 Get information about the user\u2019s current playback state, including track or episode, progress, and active device. Notes https://developer.spotify.com/documentation/web-api/reference/player/get-information-about-the-users-current-playback/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The top tracks and artists Source code in async_spotify/api/_endpoints/player.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 async def get_queue ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get information about the user\u2019s current playback state, including track or episode, progress, and active device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-information-about-the-users-current-playback/](https://developer.spotify.com/documentation/web-api/reference/player/get-information-about-the-users-current-playback/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The top tracks and artists \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . PLAYER , kwargs , auth_token ) get_recent_tracks ( self , auth_token = None , ** kwargs ) \u00b6 Get the Current User's Recently Played Tracks Notes https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The recent tracks Source code in async_spotify/api/_endpoints/player.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 async def get_recent_tracks ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the Current User's Recently Played Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/](https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The recent tracks \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . RECENTLY , kwargs , auth_token ) next ( self , auth_token = None , ** kwargs ) \u00b6 Set the volume for the user\u2019s current playback device. Notes https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-next-track/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 177 178 179 180 181 182 183 184 185 186 187 188 189 async def next ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Set the volume for the user\u2019s current playback device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-next-track/](https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-next-track/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'POST' , URLS . PLAYER . NEXT , kwargs , auth_token ) pause ( self , auth_token = None , ** kwargs ) \u00b6 Pause playback on the user\u2019s account Notes https://developer.spotify.com/documentation/web-api/reference/player/pause-a-users-playback/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 111 112 113 114 115 116 117 118 119 120 121 122 123 async def pause ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Pause playback on the user\u2019s account Notes: [https://developer.spotify.com/documentation/web-api/reference/player/pause-a-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/pause-a-users-playback/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . PAUSE , kwargs , auth_token ) play ( self , device_id = None , auth_token = None , ** kwargs ) \u00b6 Start a new context or resume current playback on the user\u2019s active device. Notes https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/ Parameters: Name Type Description Default device_id str A single device ID None auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 async def play ( self , device_id : str = None , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Start a new context or resume current playback on the user\u2019s active device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/) Args: device_id: A single device ID auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . PLAY , { 'device_id' : device_id }, auth_token , kwargs ) previous ( self , auth_token = None , ** kwargs ) \u00b6 Skips to previous track in the user\u2019s queue. Notes https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-previous-track/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 191 192 193 194 195 196 197 198 199 200 201 202 203 async def previous ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Skips to previous track in the user\u2019s queue. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-previous-track/](https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-previous-track/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'POST' , URLS . PLAYER . PREVIOUS , kwargs , auth_token ) repeat ( self , state , auth_token = None , ** kwargs ) \u00b6 Set the repeat mode for the user\u2019s playback. Options are repeat-track, repeat-context, and off. Notes https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/ Parameters: Name Type Description Default state str track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 async def repeat ( self , state : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Set the repeat mode for the user\u2019s playback. Options are repeat-track, repeat-context, and off. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/) Args: state: track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'state' : state }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . REPEAT , args , auth_token ) seek ( self , position_ms , auth_token = None , ** kwargs ) \u00b6 Pause playback on the user\u2019s account Notes https://developer.spotify.com/documentation/web-api/reference/player/seek-to-position-in-currently-playing-track/ Parameters: Name Type Description Default position_ms int The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 async def seek ( self , position_ms : int , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Pause playback on the user\u2019s account Notes: [https://developer.spotify.com/documentation/web-api/reference/player/seek-to-position-in-currently-playing-track/](https://developer.spotify.com/documentation/web-api/reference/player/seek-to-position-in-currently-playing-track/) Args: position_ms: The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'position_ms' : position_ms }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . SEEK , args , auth_token ) shuffle ( self , shuffle_on , auth_token = None , ** kwargs ) \u00b6 Toggle shuffle on or off for user\u2019s playback. Notes https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/ Parameters: Name Type Description Default shuffle_on bool The state of the shuffle required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def shuffle ( self , shuffle_on : bool , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Toggle shuffle on or off for user\u2019s playback. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/) Args: shuffle_on: The state of the shuffle auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'state' : shuffle_on }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . SHUFFLE , args , auth_token ) transfer ( self , device_id , play = False , auth_token = None ) \u00b6 Transfer playback to a new device and determine if it should start playing. Notes https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/ Parameters: Name Type Description Default play bool ensure playback happens on new device False device_id List[str] A SINGLE device ID required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/player.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 async def transfer ( self , device_id : List [ str ], play : bool = False , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Transfer playback to a new device and determine if it should start playing. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/) Args: play: ensure playback happens on new device device_id: A SINGLE device ID auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" body = { \"device_ids\" : device_id , \"state\" : play } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . PLAYER , {}, auth_token , body = body ) volume ( self , volume_percent , auth_token = None , ** kwargs ) \u00b6 Set the volume for the user\u2019s current playback device. Notes https://developer.spotify.com/documentation/web-api/reference/player/set-volume-for-users-playback/ Parameters: Name Type Description Default volume_percent int Integer. The volume to set. Must be a value from 0 to 100 inclusive. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 async def volume ( self , volume_percent : int , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Set the volume for the user\u2019s current playback device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/set-volume-for-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/set-volume-for-users-playback/) Args: volume_percent: Integer. The volume to set. Must be a value from 0 to 100 inclusive. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'volume_percent' : volume_percent }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . VOLUME , args , auth_token )","title":"Player"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player","text":"Module with the player endpoint","title":"async_spotify.api._endpoints.player"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player","text":"Player endpoint","title":"Player"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.add_to_queue","text":"Add an item to the end of the user\u2019s current playback queue Notes https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/ Parameters: Name Type Description Default spotify_id str A spotify id of an item required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 async def add_to_queue ( self , spotify_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Add an item to the end of the user\u2019s current playback queue Notes: [https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/](https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/) Args: spotify_id: A spotify id of an item auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args : dict = { 'uri' : spotify_id , ** kwargs } await self . api_request_handler . make_request ( 'POST' , URLS . PLAYER . QUEUE , args , auth_token )","title":"add_to_queue()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.get_current_track","text":"Get the User's Currently Playing Track Notes https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The current track Source code in async_spotify/api/_endpoints/player.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 async def get_current_track ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the User's Currently Playing Track Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/](https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The current track \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . PLAYING , kwargs , auth_token )","title":"get_current_track()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.get_devices","text":"Get information about a user\u2019s available devices. Notes https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The available devices Source code in async_spotify/api/_endpoints/player.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 async def get_devices ( self , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get information about a user\u2019s available devices. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/](https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/) Args: auth_token: The auth token if you set the api class not to keep the token in memory Returns: The available devices \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . DEVICES , {}, auth_token )","title":"get_devices()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.get_queue","text":"Get information about the user\u2019s current playback state, including track or episode, progress, and active device. Notes https://developer.spotify.com/documentation/web-api/reference/player/get-information-about-the-users-current-playback/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The top tracks and artists Source code in async_spotify/api/_endpoints/player.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 async def get_queue ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get information about the user\u2019s current playback state, including track or episode, progress, and active device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-information-about-the-users-current-playback/](https://developer.spotify.com/documentation/web-api/reference/player/get-information-about-the-users-current-playback/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The top tracks and artists \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . PLAYER , kwargs , auth_token )","title":"get_queue()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.get_recent_tracks","text":"Get the Current User's Recently Played Tracks Notes https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The recent tracks Source code in async_spotify/api/_endpoints/player.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 async def get_recent_tracks ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get the Current User's Recently Played Tracks Notes: [https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/](https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The recent tracks \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYER . RECENTLY , kwargs , auth_token )","title":"get_recent_tracks()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.next","text":"Set the volume for the user\u2019s current playback device. Notes https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-next-track/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 177 178 179 180 181 182 183 184 185 186 187 188 189 async def next ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Set the volume for the user\u2019s current playback device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-next-track/](https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-next-track/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'POST' , URLS . PLAYER . NEXT , kwargs , auth_token )","title":"next()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.pause","text":"Pause playback on the user\u2019s account Notes https://developer.spotify.com/documentation/web-api/reference/player/pause-a-users-playback/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 111 112 113 114 115 116 117 118 119 120 121 122 123 async def pause ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Pause playback on the user\u2019s account Notes: [https://developer.spotify.com/documentation/web-api/reference/player/pause-a-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/pause-a-users-playback/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . PAUSE , kwargs , auth_token )","title":"pause()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.play","text":"Start a new context or resume current playback on the user\u2019s active device. Notes https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/ Parameters: Name Type Description Default device_id str A single device ID None auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 async def play ( self , device_id : str = None , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Start a new context or resume current playback on the user\u2019s active device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/) Args: device_id: A single device ID auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . PLAY , { 'device_id' : device_id }, auth_token , kwargs )","title":"play()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.previous","text":"Skips to previous track in the user\u2019s queue. Notes https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-previous-track/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 191 192 193 194 195 196 197 198 199 200 201 202 203 async def previous ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Skips to previous track in the user\u2019s queue. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-previous-track/](https://developer.spotify.com/documentation/web-api/reference/player/skip-users-playback-to-previous-track/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" await self . api_request_handler . make_request ( 'POST' , URLS . PLAYER . PREVIOUS , kwargs , auth_token )","title":"previous()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.repeat","text":"Set the repeat mode for the user\u2019s playback. Options are repeat-track, repeat-context, and off. Notes https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/ Parameters: Name Type Description Default state str track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 async def repeat ( self , state : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Set the repeat mode for the user\u2019s playback. Options are repeat-track, repeat-context, and off. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/) Args: state: track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'state' : state }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . REPEAT , args , auth_token )","title":"repeat()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.seek","text":"Pause playback on the user\u2019s account Notes https://developer.spotify.com/documentation/web-api/reference/player/seek-to-position-in-currently-playing-track/ Parameters: Name Type Description Default position_ms int The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 async def seek ( self , position_ms : int , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Pause playback on the user\u2019s account Notes: [https://developer.spotify.com/documentation/web-api/reference/player/seek-to-position-in-currently-playing-track/](https://developer.spotify.com/documentation/web-api/reference/player/seek-to-position-in-currently-playing-track/) Args: position_ms: The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'position_ms' : position_ms }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . SEEK , args , auth_token )","title":"seek()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.shuffle","text":"Toggle shuffle on or off for user\u2019s playback. Notes https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/ Parameters: Name Type Description Default shuffle_on bool The state of the shuffle required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def shuffle ( self , shuffle_on : bool , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Toggle shuffle on or off for user\u2019s playback. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/) Args: shuffle_on: The state of the shuffle auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'state' : shuffle_on }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . SHUFFLE , args , auth_token )","title":"shuffle()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.transfer","text":"Transfer playback to a new device and determine if it should start playing. Notes https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/ Parameters: Name Type Description Default play bool ensure playback happens on new device False device_id List[str] A SINGLE device ID required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/player.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 async def transfer ( self , device_id : List [ str ], play : bool = False , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Transfer playback to a new device and determine if it should start playing. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/) Args: play: ensure playback happens on new device device_id: A SINGLE device ID auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" body = { \"device_ids\" : device_id , \"state\" : play } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . PLAYER , {}, auth_token , body = body )","title":"transfer()"},{"location":"public_api/endpoints/player/#async_spotify.api._endpoints.player.Player.volume","text":"Set the volume for the user\u2019s current playback device. Notes https://developer.spotify.com/documentation/web-api/reference/player/set-volume-for-users-playback/ Parameters: Name Type Description Default volume_percent int Integer. The volume to set. Must be a value from 0 to 100 inclusive. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/player.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 async def volume ( self , volume_percent : int , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Set the volume for the user\u2019s current playback device. Notes: [https://developer.spotify.com/documentation/web-api/reference/player/set-volume-for-users-playback/](https://developer.spotify.com/documentation/web-api/reference/player/set-volume-for-users-playback/) Args: volume_percent: Integer. The volume to set. Must be a value from 0 to 100 inclusive. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" args = { ** { 'volume_percent' : volume_percent }, ** kwargs } await self . api_request_handler . make_request ( 'PUT' , URLS . PLAYER . VOLUME , args , auth_token )","title":"volume()"},{"location":"public_api/endpoints/playlists/","text":"\u00b6 Module with the playlists endpoint Playlists \u00b6 Playlist endpoint add_tracks ( self , playlist_id , spotify_uris , position = None , auth_token = None ) \u00b6 Add one or more tracks to a user\u2019s playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/ Parameters: Name Type Description Default position int The position to insert the items, a zero-based index. Appended if omitted None spotify_uris List[str] A list of spotify uris required playlist_id str The id of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 async def add_tracks ( self , playlist_id : str , spotify_uris : List [ str ], position : int = None , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Add one or more tracks to a user\u2019s playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/) Args: position: The position to insert the items, a zero-based index. Appended if omitted spotify_uris: A list of spotify uris playlist_id: The id of the playlist auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" body = { 'uris' : spotify_uris } if position is not None : body [ 'position' ] = position url , _ = self . _add_url_params ( URLS . PLAYLIST . ADD_TRACKS , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'POST' , url , {}, auth_token , body = body ) change_details ( self , playlist_id , auth_token = None , ** kwargs ) \u00b6 Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/ Parameters: Name Type Description Default playlist_id str The id of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/playlists.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 async def change_details ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/](https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/) Args: playlist_id: The id of the playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . ONE , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body = kwargs ) create_playlist ( self , user_id , playlist_name , auth_token = None , ** kwargs ) \u00b6 Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/ Parameters: Name Type Description Default user_id str The id of the user required playlist_name str THe name of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/playlists.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 async def create_playlist ( self , user_id : str , playlist_name : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/) Args: user_id: The id of the user playlist_name: THe name of the playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . CREATE , { 'user_id' : user_id }) return await self . api_request_handler . make_request ( 'POST' , url , {}, auth_token , body = { ** { 'name' : playlist_name }, ** kwargs }) current_get_all ( self , auth_token = None , ** kwargs ) \u00b6 Get a list of the playlists owned or followed by the current Spotify user. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A List of Current User's Playlists Source code in async_spotify/api/_endpoints/playlists.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 async def current_get_all ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a list of the playlists owned or followed by the current Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A List of Current User's Playlists \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYLIST . ME , kwargs , auth_token ) get_cover ( self , playlist_id , auth_token = None ) \u00b6 Get the current image associated with a specific playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/ Parameters: Name Type Description Default playlist_id str The id of the Playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The cover image Source code in async_spotify/api/_endpoints/playlists.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 async def get_cover ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get the current image associated with a specific playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) Args: playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory Returns: The cover image \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . COVER , { 'playlist_id' : playlist_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token ) get_one ( self , playlist_id , auth_token = None , ** kwargs ) \u00b6 Get a playlist owned by a Spotify user. !!! notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/ !!! args playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args !!! returns A Playlist Source code in async_spotify/api/_endpoints/playlists.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 async def get_one ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a playlist owned by a Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/) Args: playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A Playlist \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . ONE , { 'playlist_id' : playlist_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token ) get_tracks ( self , playlist_id , auth_token = None , ** kwargs ) \u00b6 Get full details of the tracks or episodes of a playlist owned by a Spotify user. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/ Parameters: Name Type Description Default playlist_id str The id of the Playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The cover image Source code in async_spotify/api/_endpoints/playlists.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 async def get_tracks ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get full details of the tracks or episodes of a playlist owned by a Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/) Args: playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The cover image \"\"\" args = { ** { 'playlist_id' : playlist_id }, ** kwargs } url , args = self . _add_url_params ( URLS . PLAYLIST . TRACKS , args ) return await self . api_request_handler . make_request ( 'GET' , url , args , auth_token ) get_user_all ( self , user_id , auth_token = None , ** kwargs ) \u00b6 Get a list of the playlists owned or followed by a Spotify user. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/ Parameters: Name Type Description Default user_id str The id of the spotify user required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A List of a User's Playlists Source code in async_spotify/api/_endpoints/playlists.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 async def get_user_all ( self , user_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a list of the playlists owned or followed by a Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/) Args: user_id: The id of the spotify user auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A List of a User's Playlists \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . USER , { 'user_id' : user_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token ) remove_tracks ( self , playlist_id , spotify_uris , auth_token = None ) \u00b6 Remove one or more items from a user\u2019s playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/ Parameters: Name Type Description Default playlist_id str The id of the playlist required spotify_uris Dict[str, List[Dict[str, Any]]] A dict with a list of spotify uris in the tracks key required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 async def remove_tracks ( self , playlist_id : str , spotify_uris : Dict [ str , List [ Dict [ str , Any ]]], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Remove one or more items from a user\u2019s playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/) Args: playlist_id: The id of the playlist spotify_uris: A dict with a list of spotify uris in the tracks key auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . ADD_TRACKS , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'DELETE' , url , {}, auth_token , body = spotify_uris ) reorder_tracks ( self , playlist_id , position_dict , snapshot_id = None , auth_token = None ) \u00b6 Reorder an item or a group of items in a playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/ Parameters: Name Type Description Default playlist_id str The playlist id required position_dict Dict[str, Union[int, str]] The dict which reorders the tracks required snapshot_id str The playlist\u2019s snapshot ID against which you want to make the changes. None auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict A json with the snapshot_id Source code in async_spotify/api/_endpoints/playlists.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 async def reorder_tracks ( self , playlist_id : str , position_dict : Dict [ str , Union [ int , str ]], snapshot_id : str = None , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Reorder an item or a group of items in a playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/](https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/) Args: playlist_id: The playlist id position_dict: The dict which reorders the tracks snapshot_id: The playlist\u2019s snapshot ID against which you want to make the changes. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A json with the snapshot_id \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . TRACKS , { 'playlist_id' : playlist_id }) body = position_dict if snapshot_id : body [ 'snapshot_id' ] = snapshot_id return await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body = body ) replace_tracks ( self , playlist_id , spotify_uris , auth_token = None ) \u00b6 Replace all the items in a playlist, overwriting its existing items. This powerful request can be useful for replacing items, re-ordering existing items, or clearing the playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/ Parameters: Name Type Description Default spotify_uris List[str] A list of spotify uris required playlist_id str The id of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 async def replace_tracks ( self , playlist_id : str , spotify_uris : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Replace all the items in a playlist, overwriting its existing items. This powerful request can be useful for replacing items, re-ordering existing items, or clearing the playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/](https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/) Args: spotify_uris: A list of spotify uris playlist_id: The id of the playlist auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" body = { 'uris' : spotify_uris } url , _ = self . _add_url_params ( URLS . PLAYLIST . ADD_TRACKS , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body = body ) upload_cover ( self , playlist_id , base_64_image , auth_token = None ) \u00b6 Replace the image used to represent a specific playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/upload-custom-playlist-cover/ Parameters: Name Type Description Default playlist_id str The id of the playlist required base_64_image <module 'base64' from '/usr/lib/python3.8/base64.py'> Base64 encoded JPEG image data, maximum payload size is 256 KB required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 async def upload_cover ( self , playlist_id : str , base_64_image : base64 , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Replace the image used to represent a specific playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/upload-custom-playlist-cover/](https://developer.spotify.com/documentation/web-api/reference/playlists/upload-custom-playlist-cover/) Args: playlist_id: The id of the playlist base_64_image: Base64 encoded JPEG image data, maximum payload size is 256 KB auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . COVER , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , base_64_image )","title":"Playlists"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists","text":"Module with the playlists endpoint","title":"async_spotify.api._endpoints.playlists"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists","text":"Playlist endpoint","title":"Playlists"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.add_tracks","text":"Add one or more tracks to a user\u2019s playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/ Parameters: Name Type Description Default position int The position to insert the items, a zero-based index. Appended if omitted None spotify_uris List[str] A list of spotify uris required playlist_id str The id of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 async def add_tracks ( self , playlist_id : str , spotify_uris : List [ str ], position : int = None , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Add one or more tracks to a user\u2019s playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/) Args: position: The position to insert the items, a zero-based index. Appended if omitted spotify_uris: A list of spotify uris playlist_id: The id of the playlist auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" body = { 'uris' : spotify_uris } if position is not None : body [ 'position' ] = position url , _ = self . _add_url_params ( URLS . PLAYLIST . ADD_TRACKS , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'POST' , url , {}, auth_token , body = body )","title":"add_tracks()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.change_details","text":"Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/ Parameters: Name Type Description Default playlist_id str The id of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/playlists.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 async def change_details ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> None : \"\"\" Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/](https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/) Args: playlist_id: The id of the playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . ONE , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body = kwargs )","title":"change_details()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.create_playlist","text":"Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/ Parameters: Name Type Description Default user_id str The id of the user required playlist_name str THe name of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Source code in async_spotify/api/_endpoints/playlists.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 async def create_playlist ( self , user_id : str , playlist_name : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Change a playlist\u2019s name and public/private state. (The user must, of course, own the playlist.) Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/) Args: user_id: The id of the user playlist_name: THe name of the playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . CREATE , { 'user_id' : user_id }) return await self . api_request_handler . make_request ( 'POST' , url , {}, auth_token , body = { ** { 'name' : playlist_name }, ** kwargs })","title":"create_playlist()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.current_get_all","text":"Get a list of the playlists owned or followed by the current Spotify user. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A List of Current User's Playlists Source code in async_spotify/api/_endpoints/playlists.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 async def current_get_all ( self , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a list of the playlists owned or followed by the current Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/) Args: auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A List of Current User's Playlists \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . PLAYLIST . ME , kwargs , auth_token )","title":"current_get_all()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.get_cover","text":"Get the current image associated with a specific playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/ Parameters: Name Type Description Default playlist_id str The id of the Playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The cover image Source code in async_spotify/api/_endpoints/playlists.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 async def get_cover ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get the current image associated with a specific playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) Args: playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory Returns: The cover image \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . COVER , { 'playlist_id' : playlist_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token )","title":"get_cover()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.get_one","text":"Get a playlist owned by a Spotify user. !!! notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/ !!! args playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args !!! returns A Playlist Source code in async_spotify/api/_endpoints/playlists.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 async def get_one ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a playlist owned by a Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/) Args: playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A Playlist \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . ONE , { 'playlist_id' : playlist_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token )","title":"get_one()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.get_tracks","text":"Get full details of the tracks or episodes of a playlist owned by a Spotify user. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/ Parameters: Name Type Description Default playlist_id str The id of the Playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The cover image Source code in async_spotify/api/_endpoints/playlists.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 async def get_tracks ( self , playlist_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get full details of the tracks or episodes of a playlist owned by a Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/) Args: playlist_id: The id of the Playlist auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The cover image \"\"\" args = { ** { 'playlist_id' : playlist_id }, ** kwargs } url , args = self . _add_url_params ( URLS . PLAYLIST . TRACKS , args ) return await self . api_request_handler . make_request ( 'GET' , url , args , auth_token )","title":"get_tracks()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.get_user_all","text":"Get a list of the playlists owned or followed by a Spotify user. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/ Parameters: Name Type Description Default user_id str The id of the spotify user required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A List of a User's Playlists Source code in async_spotify/api/_endpoints/playlists.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 async def get_user_all ( self , user_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get a list of the playlists owned or followed by a Spotify user. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/](https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/) Args: user_id: The id of the spotify user auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A List of a User's Playlists \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . USER , { 'user_id' : user_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token )","title":"get_user_all()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.remove_tracks","text":"Remove one or more items from a user\u2019s playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/ Parameters: Name Type Description Default playlist_id str The id of the playlist required spotify_uris Dict[str, List[Dict[str, Any]]] A dict with a list of spotify uris in the tracks key required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 async def remove_tracks ( self , playlist_id : str , spotify_uris : Dict [ str , List [ Dict [ str , Any ]]], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Remove one or more items from a user\u2019s playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/](https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/) Args: playlist_id: The id of the playlist spotify_uris: A dict with a list of spotify uris in the tracks key auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . ADD_TRACKS , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'DELETE' , url , {}, auth_token , body = spotify_uris )","title":"remove_tracks()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.reorder_tracks","text":"Reorder an item or a group of items in a playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/ Parameters: Name Type Description Default playlist_id str The playlist id required position_dict Dict[str, Union[int, str]] The dict which reorders the tracks required snapshot_id str The playlist\u2019s snapshot ID against which you want to make the changes. None auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict A json with the snapshot_id Source code in async_spotify/api/_endpoints/playlists.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 async def reorder_tracks ( self , playlist_id : str , position_dict : Dict [ str , Union [ int , str ]], snapshot_id : str = None , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Reorder an item or a group of items in a playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/](https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/) Args: playlist_id: The playlist id position_dict: The dict which reorders the tracks snapshot_id: The playlist\u2019s snapshot ID against which you want to make the changes. auth_token: The auth token if you set the api class not to keep the token in memory Returns: A json with the snapshot_id \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . TRACKS , { 'playlist_id' : playlist_id }) body = position_dict if snapshot_id : body [ 'snapshot_id' ] = snapshot_id return await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body = body )","title":"reorder_tracks()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.replace_tracks","text":"Replace all the items in a playlist, overwriting its existing items. This powerful request can be useful for replacing items, re-ordering existing items, or clearing the playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/ Parameters: Name Type Description Default spotify_uris List[str] A list of spotify uris required playlist_id str The id of the playlist required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 async def replace_tracks ( self , playlist_id : str , spotify_uris : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Replace all the items in a playlist, overwriting its existing items. This powerful request can be useful for replacing items, re-ordering existing items, or clearing the playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/](https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/) Args: spotify_uris: A list of spotify uris playlist_id: The id of the playlist auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" body = { 'uris' : spotify_uris } url , _ = self . _add_url_params ( URLS . PLAYLIST . ADD_TRACKS , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , body = body )","title":"replace_tracks()"},{"location":"public_api/endpoints/playlists/#async_spotify.api._endpoints.playlists.Playlists.upload_cover","text":"Replace the image used to represent a specific playlist. Notes https://developer.spotify.com/documentation/web-api/reference/playlists/upload-custom-playlist-cover/ Parameters: Name Type Description Default playlist_id str The id of the playlist required base_64_image <module 'base64' from '/usr/lib/python3.8/base64.py'> Base64 encoded JPEG image data, maximum payload size is 256 KB required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Source code in async_spotify/api/_endpoints/playlists.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 async def upload_cover ( self , playlist_id : str , base_64_image : base64 , auth_token : SpotifyAuthorisationToken = None ) -> None : \"\"\" Replace the image used to represent a specific playlist. Notes: [https://developer.spotify.com/documentation/web-api/reference/playlists/upload-custom-playlist-cover/](https://developer.spotify.com/documentation/web-api/reference/playlists/upload-custom-playlist-cover/) Args: playlist_id: The id of the playlist base_64_image: Base64 encoded JPEG image data, maximum payload size is 256 KB auth_token: The auth token if you set the api class not to keep the token in memory \"\"\" url , _ = self . _add_url_params ( URLS . PLAYLIST . COVER , { 'playlist_id' : playlist_id }) await self . api_request_handler . make_request ( 'PUT' , url , {}, auth_token , base_64_image )","title":"upload_cover()"},{"location":"public_api/endpoints/search/","text":"\u00b6 Module with the search endpoint Search \u00b6 Search endpoint start ( self , query , query_type , auth_token = None , ** kwargs ) \u00b6 Make a search Notes https://developer.spotify.com/documentation/web-api/reference/search/search/ Parameters: Name Type Description Default query str The search query required query_type List[str] A comma-separated list of item types to search across. Valid types are: album , artist, playlist, track, show and episode. Search results include hits from all the specified item types. For example: q=name:abacab&type=album,track returns both albums and tracks with \u201cabacab\u201d included in their name. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The search result Source code in async_spotify/api/_endpoints/search.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def start ( self , query : str , query_type : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Make a search Notes: https://developer.spotify.com/documentation/web-api/reference/search/search/ Args: query: The search query query_type: A comma-separated list of item types to search across. Valid types are: album , artist, playlist, track, show and episode. Search results include hits from all the specified item types. For example: q=name:abacab&type=album,track returns both albums and tracks with \u201cabacab\u201d included in their name. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The search result \"\"\" args = { ** { 'q' : query , 'type' : query_type }, ** kwargs } return await self . api_request_handler . make_request ( 'GET' , URLS . SEARCH , args , auth_token )","title":"Search"},{"location":"public_api/endpoints/search/#async_spotify.api._endpoints.search","text":"Module with the search endpoint","title":"async_spotify.api._endpoints.search"},{"location":"public_api/endpoints/search/#async_spotify.api._endpoints.search.Search","text":"Search endpoint","title":"Search"},{"location":"public_api/endpoints/search/#async_spotify.api._endpoints.search.Search.start","text":"Make a search Notes https://developer.spotify.com/documentation/web-api/reference/search/search/ Parameters: Name Type Description Default query str The search query required query_type List[str] A comma-separated list of item types to search across. Valid types are: album , artist, playlist, track, show and episode. Search results include hits from all the specified item types. For example: q=name:abacab&type=album,track returns both albums and tracks with \u201cabacab\u201d included in their name. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict The search result Source code in async_spotify/api/_endpoints/search.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def start ( self , query : str , query_type : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Make a search Notes: https://developer.spotify.com/documentation/web-api/reference/search/search/ Args: query: The search query query_type: A comma-separated list of item types to search across. Valid types are: album , artist, playlist, track, show and episode. Search results include hits from all the specified item types. For example: q=name:abacab&type=album,track returns both albums and tracks with \u201cabacab\u201d included in their name. auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: The search result \"\"\" args = { ** { 'q' : query , 'type' : query_type }, ** kwargs } return await self . api_request_handler . make_request ( 'GET' , URLS . SEARCH , args , auth_token )","title":"start()"},{"location":"public_api/endpoints/shows/","text":"\u00b6 Module with the shows endpoint Shows \u00b6 Shows endpoint get_episodes ( self , show_id , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information about an show\u2019s episodes. Optional parameters can be used to limit the number of episodes returned. Notes https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/ Parameters: Name Type Description Default show_id str The spotify id of the show required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A list of episodes Source code in async_spotify/api/_endpoints/shows.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 async def get_episodes ( self , show_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about an show\u2019s episodes. Optional parameters can be used to limit the number of episodes returned. Notes: [https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/9) Args: show_id: The spotify id of the show auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A list of episodes \"\"\" url , _ = self . _add_url_params ( URLS . SHOWS . EPISODES , { 'id' : show_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token ) get_one ( self , show_id , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information for a single show identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/ Parameters: Name Type Description Default show_id str The spotify id of the show required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict One show Source code in async_spotify/api/_endpoints/shows.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 async def get_one ( self , show_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for a single show identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) Args: show_id: The spotify id of the show auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: One show \"\"\" url , _ = self . _add_url_params ( URLS . SHOWS . ONE , { 'id' : show_id }) return await self . api_request_handler . make_request ( 'GET' , url , { ** kwargs }, auth_token ) get_several ( self , show_id_list , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information for multiple shows based on their Spotify IDs. Notes https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/ Parameters: Name Type Description Default show_id_list List[str] A list of spotify ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict Multiple shows Source code in async_spotify/api/_endpoints/shows.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 async def get_several ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for multiple shows based on their Spotify IDs. Notes: [https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) Args: show_id_list: A list of spotify ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: Multiple shows \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . SHOWS . SEVERAL , { ** { 'ids' : show_id_list }, ** kwargs }, auth_token )","title":"Shows"},{"location":"public_api/endpoints/shows/#async_spotify.api._endpoints.shows","text":"Module with the shows endpoint","title":"async_spotify.api._endpoints.shows"},{"location":"public_api/endpoints/shows/#async_spotify.api._endpoints.shows.Shows","text":"Shows endpoint","title":"Shows"},{"location":"public_api/endpoints/shows/#async_spotify.api._endpoints.shows.Shows.get_episodes","text":"Get Spotify catalog information about an show\u2019s episodes. Optional parameters can be used to limit the number of episodes returned. Notes https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/ Parameters: Name Type Description Default show_id str The spotify id of the show required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict A list of episodes Source code in async_spotify/api/_endpoints/shows.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 async def get_episodes ( self , show_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information about an show\u2019s episodes. Optional parameters can be used to limit the number of episodes returned. Notes: [https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/9) Args: show_id: The spotify id of the show auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: A list of episodes \"\"\" url , _ = self . _add_url_params ( URLS . SHOWS . EPISODES , { 'id' : show_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token )","title":"get_episodes()"},{"location":"public_api/endpoints/shows/#async_spotify.api._endpoints.shows.Shows.get_one","text":"Get Spotify catalog information for a single show identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/ Parameters: Name Type Description Default show_id str The spotify id of the show required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict One show Source code in async_spotify/api/_endpoints/shows.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 async def get_one ( self , show_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for a single show identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) Args: show_id: The spotify id of the show auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: One show \"\"\" url , _ = self . _add_url_params ( URLS . SHOWS . ONE , { 'id' : show_id }) return await self . api_request_handler . make_request ( 'GET' , url , { ** kwargs }, auth_token )","title":"get_one()"},{"location":"public_api/endpoints/shows/#async_spotify.api._endpoints.shows.Shows.get_several","text":"Get Spotify catalog information for multiple shows based on their Spotify IDs. Notes https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/ Parameters: Name Type Description Default show_id_list List[str] A list of spotify ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict Multiple shows Source code in async_spotify/api/_endpoints/shows.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 async def get_several ( self , show_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for multiple shows based on their Spotify IDs. Notes: [https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) Args: show_id_list: A list of spotify ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: Multiple shows \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . SHOWS . SEVERAL , { ** { 'ids' : show_id_list }, ** kwargs }, auth_token )","title":"get_several()"},{"location":"public_api/endpoints/tracks/","text":"\u00b6 Module with the albums endpoint Track \u00b6 Track endpoint audio_analyze ( self , track_id , auth_token = None ) \u00b6 Get a detailed audio analysis for a single track identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/ Parameters: Name Type Description Default track_id str The spotify track id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict Detailed audio analysis for a single track Source code in async_spotify/api/_endpoints/tracks.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 async def audio_analyze ( self , track_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get a detailed audio analysis for a single track identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/) Args: track_id: The spotify track id auth_token: The auth token if you set the api class not to keep the token in memory Returns: Detailed audio analysis for a single track \"\"\" url , _ = self . _add_url_params ( URLS . TRACKS . ANALYZE , { 'id' : track_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token ) audio_features ( self , track_id , auth_token = None ) \u00b6 Get audio feature information for a single track identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/ Parameters: Name Type Description Default track_id str The spotify track id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict Audio feature information for a single track Source code in async_spotify/api/_endpoints/tracks.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 async def audio_features ( self , track_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get audio feature information for a single track identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/) Args: track_id: The spotify track id auth_token: The auth token if you set the api class not to keep the token in memory Returns: Audio feature information for a single track \"\"\" url , _ = self . _add_url_params ( URLS . TRACKS . FEATURES , { 'id' : track_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token ) get_one ( self , track_id , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information for a single track identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/ Parameters: Name Type Description Default track_id str The spotify track id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict Information about one track Source code in async_spotify/api/_endpoints/tracks.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 async def get_one ( self , track_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for a single track identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/) Args: track_id: The spotify track id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: Information about one track \"\"\" url , _ = self . _add_url_params ( URLS . TRACKS . ONE , { 'id' : track_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token ) get_several ( self , track_id_list , auth_token = None , ** kwargs ) \u00b6 Get Spotify catalog information for multiple tracks based on their Spotify IDs. Notes [https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/}(https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/) Parameters: Name Type Description Default track_id_list List[str] A list of spotify ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict Information about several tracks Source code in async_spotify/api/_endpoints/tracks.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def get_several ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for multiple tracks based on their Spotify IDs. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/}(https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/) Args: track_id_list: A list of spotify ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: Information about several tracks \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . TRACKS . SEVERAL , { ** { 'ids' : track_id_list }, ** kwargs }, auth_token ) several_audio_features ( self , track_id_list , auth_token = None ) \u00b6 Get audio features for multiple tracks based on their Spotify IDs. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/ Parameters: Name Type Description Default track_id_list List[str] A list of spotify ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict Audio feature information for several track Source code in async_spotify/api/_endpoints/tracks.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 async def several_audio_features ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get audio features for multiple tracks based on their Spotify IDs. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/) Args: track_id_list: A list of spotify ids auth_token: The auth token if you set the api class not to keep the token in memory Returns: Audio feature information for several track \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . TRACKS . MULTI_FEATURES , { 'ids' : track_id_list }, auth_token )","title":"Tracks"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks","text":"Module with the albums endpoint","title":"async_spotify.api._endpoints.tracks"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks.Track","text":"Track endpoint","title":"Track"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks.Track.audio_analyze","text":"Get a detailed audio analysis for a single track identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/ Parameters: Name Type Description Default track_id str The spotify track id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict Detailed audio analysis for a single track Source code in async_spotify/api/_endpoints/tracks.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 async def audio_analyze ( self , track_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get a detailed audio analysis for a single track identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/) Args: track_id: The spotify track id auth_token: The auth token if you set the api class not to keep the token in memory Returns: Detailed audio analysis for a single track \"\"\" url , _ = self . _add_url_params ( URLS . TRACKS . ANALYZE , { 'id' : track_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token )","title":"audio_analyze()"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks.Track.audio_features","text":"Get audio feature information for a single track identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/ Parameters: Name Type Description Default track_id str The spotify track id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict Audio feature information for a single track Source code in async_spotify/api/_endpoints/tracks.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 async def audio_features ( self , track_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get audio feature information for a single track identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/) Args: track_id: The spotify track id auth_token: The auth token if you set the api class not to keep the token in memory Returns: Audio feature information for a single track \"\"\" url , _ = self . _add_url_params ( URLS . TRACKS . FEATURES , { 'id' : track_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token )","title":"audio_features()"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks.Track.get_one","text":"Get Spotify catalog information for a single track identified by its unique Spotify ID. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/ Parameters: Name Type Description Default track_id str The spotify track id required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict Information about one track Source code in async_spotify/api/_endpoints/tracks.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 async def get_one ( self , track_id : str , auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for a single track identified by its unique Spotify ID. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/) Args: track_id: The spotify track id auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: Information about one track \"\"\" url , _ = self . _add_url_params ( URLS . TRACKS . ONE , { 'id' : track_id }) return await self . api_request_handler . make_request ( 'GET' , url , kwargs , auth_token )","title":"get_one()"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks.Track.get_several","text":"Get Spotify catalog information for multiple tracks based on their Spotify IDs. Notes [https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/}(https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/) Parameters: Name Type Description Default track_id_list List[str] A list of spotify ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None kwargs Optional arguments as keyword args {} Returns: Type Description dict Information about several tracks Source code in async_spotify/api/_endpoints/tracks.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def get_several ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None , ** kwargs ) -> dict : \"\"\" Get Spotify catalog information for multiple tracks based on their Spotify IDs. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/}(https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/) Args: track_id_list: A list of spotify ids auth_token: The auth token if you set the api class not to keep the token in memory kwargs: Optional arguments as keyword args Returns: Information about several tracks \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . TRACKS . SEVERAL , { ** { 'ids' : track_id_list }, ** kwargs }, auth_token )","title":"get_several()"},{"location":"public_api/endpoints/tracks/#async_spotify.api._endpoints.tracks.Track.several_audio_features","text":"Get audio features for multiple tracks based on their Spotify IDs. Notes https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/ Parameters: Name Type Description Default track_id_list List[str] A list of spotify ids required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict Audio feature information for several track Source code in async_spotify/api/_endpoints/tracks.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 async def several_audio_features ( self , track_id_list : List [ str ], auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get audio features for multiple tracks based on their Spotify IDs. Notes: [https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/](https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/) Args: track_id_list: A list of spotify ids auth_token: The auth token if you set the api class not to keep the token in memory Returns: Audio feature information for several track \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . TRACKS . MULTI_FEATURES , { 'ids' : track_id_list }, auth_token )","title":"several_audio_features()"},{"location":"public_api/endpoints/user/","text":"\u00b6 Module with the user endpoint User \u00b6 User endpoint get_one ( self , user_id , auth_token = None ) \u00b6 Get detailed profile information about a user (including the current user\u2019s username). Notes https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/ Parameters: Name Type Description Default user_id str The user\u2019s Spotify user ID. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The Current User's Profile Source code in async_spotify/api/_endpoints/user.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 async def get_one ( self , user_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get detailed profile information about a user (including the current user\u2019s username). Notes: [https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/](https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/) Args: user_id: The user\u2019s Spotify user ID. auth_token: The auth token if you set the api class not to keep the token in memory Returns: The Current User's Profile \"\"\" url , _ = self . _add_url_params ( URLS . USER . USER , { 'user_id' : user_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token ) me ( self , auth_token = None ) \u00b6 Get detailed profile information about the current user (including the current user\u2019s username). Notes https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The Current User's Profile Source code in async_spotify/api/_endpoints/user.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 async def me ( self , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get detailed profile information about the current user (including the current user\u2019s username). Notes: [https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/](https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/) Args: auth_token: The auth token if you set the api class not to keep the token in memory Returns: The Current User's Profile \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . USER . ME , {}, auth_token )","title":"User"},{"location":"public_api/endpoints/user/#async_spotify.api._endpoints.user","text":"Module with the user endpoint","title":"async_spotify.api._endpoints.user"},{"location":"public_api/endpoints/user/#async_spotify.api._endpoints.user.User","text":"User endpoint","title":"User"},{"location":"public_api/endpoints/user/#async_spotify.api._endpoints.user.User.get_one","text":"Get detailed profile information about a user (including the current user\u2019s username). Notes https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/ Parameters: Name Type Description Default user_id str The user\u2019s Spotify user ID. required auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The Current User's Profile Source code in async_spotify/api/_endpoints/user.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 async def get_one ( self , user_id : str , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get detailed profile information about a user (including the current user\u2019s username). Notes: [https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/](https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/) Args: user_id: The user\u2019s Spotify user ID. auth_token: The auth token if you set the api class not to keep the token in memory Returns: The Current User's Profile \"\"\" url , _ = self . _add_url_params ( URLS . USER . USER , { 'user_id' : user_id }) return await self . api_request_handler . make_request ( 'GET' , url , {}, auth_token )","title":"get_one()"},{"location":"public_api/endpoints/user/#async_spotify.api._endpoints.user.User.me","text":"Get detailed profile information about the current user (including the current user\u2019s username). Notes https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/ Parameters: Name Type Description Default auth_token SpotifyAuthorisationToken The auth token if you set the api class not to keep the token in memory None Returns: Type Description dict The Current User's Profile Source code in async_spotify/api/_endpoints/user.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 async def me ( self , auth_token : SpotifyAuthorisationToken = None ) -> dict : \"\"\" Get detailed profile information about the current user (including the current user\u2019s username). Notes: [https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/](https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/) Args: auth_token: The auth token if you set the api class not to keep the token in memory Returns: The Current User's Profile \"\"\" return await self . api_request_handler . make_request ( 'GET' , URLS . USER . ME , {}, auth_token )","title":"me()"},{"location":"reference/error_message/","text":"\u00b6 Class which handles the error message the spotify exceptions use ErrorMessage \u00b6 The error message __init__ ( self , status = 0 , message = '' ) special \u00b6 Create a Error message object which will be used internally by the spotify exceptions Parameters: Name Type Description Default status int The http status code (0 if not applicable) 0 message str The error message '' Source code in async_spotify/_error_message.py 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , status : int = 0 , message : str = '' ): \"\"\" Create a Error message object which will be used internally by the spotify exceptions Args: status: The http status code (0 if not applicable) message: The error message \"\"\" self . message = message self . status = status","title":"Error Message"},{"location":"reference/error_message/#async_spotify._error_message","text":"Class which handles the error message the spotify exceptions use","title":"async_spotify._error_message"},{"location":"reference/error_message/#async_spotify._error_message.ErrorMessage","text":"The error message","title":"ErrorMessage"},{"location":"reference/error_message/#async_spotify._error_message.ErrorMessage.__init__","text":"Create a Error message object which will be used internally by the spotify exceptions Parameters: Name Type Description Default status int The http status code (0 if not applicable) 0 message str The error message '' Source code in async_spotify/_error_message.py 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , status : int = 0 , message : str = '' ): \"\"\" Create a Error message object which will be used internally by the spotify exceptions Args: status: The http status code (0 if not applicable) message: The error message \"\"\" self . message = message self . status = status","title":"__init__()"},{"location":"reference/request_handler/","text":"\u00b6 The api request handler singleton ApiRequestHandler \u00b6 The request handler that makes the calls to the spotify api. This class is a singleton. __init__ ( self , spotify_authorisation_token , token_renew_instance , spotify_api_client ) special \u00b6 Create a new ApiRequestHandler class. The api class should be at least once passed to the constructor of this class. Otherwise it will not work. Parameters: Name Type Description Default spotify_authorisation_token SpotifyAuthorisationToken The auth token of the api class required token_renew_instance TokenRenewClass An instance of a token renew class required spotify_api_client The spotify api client required Source code in async_spotify/api/_api_request_maker.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def __init__ ( self , spotify_authorisation_token : SpotifyAuthorisationToken , token_renew_instance : TokenRenewClass , spotify_api_client ): \"\"\" Create a new ApiRequestHandler class. The api class should be at least once passed to the constructor of this class. Otherwise it will not work. Args: spotify_authorisation_token: The auth token of the api class token_renew_instance: An instance of a token renew class spotify_api_client: The spotify api client \"\"\" self . spotify_authorisation_token : SpotifyAuthorisationToken = spotify_authorisation_token self . token_renew_instance : TokenRenewClass = token_renew_instance self . __spotify_api_client = spotify_api_client self . client_session_list : Optional [ Deque [ ClientSession ]] = deque ([]) close_client ( self ) \u00b6 Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program Source code in async_spotify/api/_api_request_maker.py 71 72 73 74 75 76 77 78 79 80 async def close_client ( self ) -> None : \"\"\" Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program \"\"\" for client in self . client_session_list : await client . close () self . client_session_list : Deque = deque ([]) create_new_client ( self , request_timeout , request_limit ) \u00b6 Create a new client Parameters: Name Type Description Default request_timeout int The timout which should be used for making requests required request_limit int The maximal number of requests per session required Source code in async_spotify/api/_api_request_maker.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 async def create_new_client ( self , request_timeout : int , request_limit : int ) -> None : \"\"\" Create a new client Args: request_timeout: The timout which should be used for making requests request_limit: The maximal number of requests per session \"\"\" if self . client_session_list : await self . close_client () client_instance_number : int = math . ceil ( request_limit / 500 ) for _ in range ( client_instance_number ): timeout = ClientTimeout ( total = request_timeout ) connector = TCPConnector ( limit = request_limit , enable_cleanup_closed = True ) client_session = ClientSession ( connector = connector , timeout = timeout , cookie_jar = DummyCookieJar ()) self . client_session_list . append ( client_session ) make_request ( self , method , url , query_params , auth_token , body = None , last_try = False ) \u00b6 Make a request to the spotify api Parameters: Name Type Description Default method str The method that should be used (get, post, put, delete) required url str The url the request is going to required query_params Optional[dict] URL query params for the request required auth_token SpotifyAuthorisationToken The auth token (None if the in memory token should be used) required body dict Add a body to the request None last_try Check if this is the last try (used if you use a token refresh class) False Returns: The spotify api response Source code in async_spotify/api/_api_request_maker.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 async def make_request ( self , method : str , url : str , query_params : Optional [ dict ], auth_token : SpotifyAuthorisationToken , body : dict = None , last_try = False ) \\ -> Union [ dict , List [ bool ], None , bool ]: \"\"\" Make a request to the spotify api Args: method: The method that should be used (get, post, put, delete) url: The url the request is going to query_params: URL query params for the request auth_token: The auth token (None if the in memory token should be used) body: Add a body to the request last_try: Check if this is the last try (used if you use a token refresh class) Returns: The spotify api response \"\"\" if not self . client_session_list : message = 'You have to create a new client with create_new_client ' \\ 'before you can make requests to the spotify api.' raise SpotifyError ( ErrorMessage ( message = message ) . __dict__ ) # Prepare the data for the api request url_params , headers , updated_body = self . _prepare_request_parameters ( auth_token , query_params , body ) # Round robin so you use a different client for every new request self . client_session_list . rotate ( 1 ) client : ClientSession = self . client_session_list [ 0 ] # Make the api response async with client . request ( method , url , params = url_params , headers = headers , data = updated_body ) as response : response_status = ResponseStatus ( response . status ) # Handle the parsing of the rate limit exceeded response which does not work for some reason response_text : str = await response . text () response_json : dict = {} try : response_json : dict = json . loads ( response_text ) except JSONDecodeError : pass # Expired if response_status . code == 401 : if self . token_renew_instance and not last_try : auth_token : SpotifyAuthorisationToken = await self . token_renew_instance ( self . __spotify_api_client ) # Update the auth token if the token should be kept in memory if self . spotify_authorisation_token . valid : self . spotify_authorisation_token . access_token = auth_token . access_token self . spotify_authorisation_token . activation_time = auth_token . activation_time self . spotify_authorisation_token . refresh_token = auth_token . refresh_token return await self . make_request ( method , url , query_params , auth_token , body , last_try = True ) else : raise TokenExpired ( response_json ) # Rate limit exceeded if response_status . code == 429 : raise RateLimitExceeded ( response_json ) # Check if the response was a success if not response_status . success : raise SpotifyAPIError ( response_json ) return response_json","title":"Request Handler"},{"location":"reference/request_handler/#async_spotify.api._api_request_maker","text":"The api request handler singleton","title":"async_spotify.api._api_request_maker"},{"location":"reference/request_handler/#async_spotify.api._api_request_maker.ApiRequestHandler","text":"The request handler that makes the calls to the spotify api. This class is a singleton.","title":"ApiRequestHandler"},{"location":"reference/request_handler/#async_spotify.api._api_request_maker.ApiRequestHandler.__init__","text":"Create a new ApiRequestHandler class. The api class should be at least once passed to the constructor of this class. Otherwise it will not work. Parameters: Name Type Description Default spotify_authorisation_token SpotifyAuthorisationToken The auth token of the api class required token_renew_instance TokenRenewClass An instance of a token renew class required spotify_api_client The spotify api client required Source code in async_spotify/api/_api_request_maker.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def __init__ ( self , spotify_authorisation_token : SpotifyAuthorisationToken , token_renew_instance : TokenRenewClass , spotify_api_client ): \"\"\" Create a new ApiRequestHandler class. The api class should be at least once passed to the constructor of this class. Otherwise it will not work. Args: spotify_authorisation_token: The auth token of the api class token_renew_instance: An instance of a token renew class spotify_api_client: The spotify api client \"\"\" self . spotify_authorisation_token : SpotifyAuthorisationToken = spotify_authorisation_token self . token_renew_instance : TokenRenewClass = token_renew_instance self . __spotify_api_client = spotify_api_client self . client_session_list : Optional [ Deque [ ClientSession ]] = deque ([])","title":"__init__()"},{"location":"reference/request_handler/#async_spotify.api._api_request_maker.ApiRequestHandler.close_client","text":"Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program Source code in async_spotify/api/_api_request_maker.py 71 72 73 74 75 76 77 78 79 80 async def close_client ( self ) -> None : \"\"\" Close the current client session. You have to create a new one to connect again to spotify. This method should always be called before you end your program \"\"\" for client in self . client_session_list : await client . close () self . client_session_list : Deque = deque ([])","title":"close_client()"},{"location":"reference/request_handler/#async_spotify.api._api_request_maker.ApiRequestHandler.create_new_client","text":"Create a new client Parameters: Name Type Description Default request_timeout int The timout which should be used for making requests required request_limit int The maximal number of requests per session required Source code in async_spotify/api/_api_request_maker.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 async def create_new_client ( self , request_timeout : int , request_limit : int ) -> None : \"\"\" Create a new client Args: request_timeout: The timout which should be used for making requests request_limit: The maximal number of requests per session \"\"\" if self . client_session_list : await self . close_client () client_instance_number : int = math . ceil ( request_limit / 500 ) for _ in range ( client_instance_number ): timeout = ClientTimeout ( total = request_timeout ) connector = TCPConnector ( limit = request_limit , enable_cleanup_closed = True ) client_session = ClientSession ( connector = connector , timeout = timeout , cookie_jar = DummyCookieJar ()) self . client_session_list . append ( client_session )","title":"create_new_client()"},{"location":"reference/request_handler/#async_spotify.api._api_request_maker.ApiRequestHandler.make_request","text":"Make a request to the spotify api Parameters: Name Type Description Default method str The method that should be used (get, post, put, delete) required url str The url the request is going to required query_params Optional[dict] URL query params for the request required auth_token SpotifyAuthorisationToken The auth token (None if the in memory token should be used) required body dict Add a body to the request None last_try Check if this is the last try (used if you use a token refresh class) False Returns: The spotify api response Source code in async_spotify/api/_api_request_maker.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 async def make_request ( self , method : str , url : str , query_params : Optional [ dict ], auth_token : SpotifyAuthorisationToken , body : dict = None , last_try = False ) \\ -> Union [ dict , List [ bool ], None , bool ]: \"\"\" Make a request to the spotify api Args: method: The method that should be used (get, post, put, delete) url: The url the request is going to query_params: URL query params for the request auth_token: The auth token (None if the in memory token should be used) body: Add a body to the request last_try: Check if this is the last try (used if you use a token refresh class) Returns: The spotify api response \"\"\" if not self . client_session_list : message = 'You have to create a new client with create_new_client ' \\ 'before you can make requests to the spotify api.' raise SpotifyError ( ErrorMessage ( message = message ) . __dict__ ) # Prepare the data for the api request url_params , headers , updated_body = self . _prepare_request_parameters ( auth_token , query_params , body ) # Round robin so you use a different client for every new request self . client_session_list . rotate ( 1 ) client : ClientSession = self . client_session_list [ 0 ] # Make the api response async with client . request ( method , url , params = url_params , headers = headers , data = updated_body ) as response : response_status = ResponseStatus ( response . status ) # Handle the parsing of the rate limit exceeded response which does not work for some reason response_text : str = await response . text () response_json : dict = {} try : response_json : dict = json . loads ( response_text ) except JSONDecodeError : pass # Expired if response_status . code == 401 : if self . token_renew_instance and not last_try : auth_token : SpotifyAuthorisationToken = await self . token_renew_instance ( self . __spotify_api_client ) # Update the auth token if the token should be kept in memory if self . spotify_authorisation_token . valid : self . spotify_authorisation_token . access_token = auth_token . access_token self . spotify_authorisation_token . activation_time = auth_token . activation_time self . spotify_authorisation_token . refresh_token = auth_token . refresh_token return await self . make_request ( method , url , query_params , auth_token , body , last_try = True ) else : raise TokenExpired ( response_json ) # Rate limit exceeded if response_status . code == 429 : raise RateLimitExceeded ( response_json ) # Check if the response was a success if not response_status . success : raise SpotifyAPIError ( response_json ) return response_json","title":"make_request()"},{"location":"reference/status_classes/","text":"\u00b6 Wraps the status code of a response to give some additional context ResponseStatus \u00b6 A response status object that can be checked if a request was ok __init__ ( self , status_code ) special \u00b6 Create a Response status object that translates the status code to a success and message Parameters: Name Type Description Default status_code int A valid http status code required Source code in async_spotify/api/_response_status.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , status_code : int ): \"\"\" Create a Response status object that translates the status code to a success and message Args: status_code: A valid http status code \"\"\" self . moved = False self . success = False self . error = False if status_code in STATUS_CODES [ \"OK\" ]: self . success = True message : str = STATUS_CODES [ \"OK\" ][ status_code ][ 0 ] elif status_code in STATUS_CODES [ \"REDIRECT\" ]: self . moved = True message : str = STATUS_CODES [ \"REDIRECT\" ][ status_code ][ 0 ] elif status_code in STATUS_CODES [ \"CLIENT_ERROR\" ]: self . error = True message : str = STATUS_CODES [ \"CLIENT_ERROR\" ][ status_code ][ 0 ] elif status_code in STATUS_CODES [ \"SERVER_ERROR\" ]: self . error = True message = STATUS_CODES [ \"SERVER_ERROR\" ][ status_code ][ 0 ] else : self . error = True message : str = \"Unknown response code\" self . code : int = status_code self . message : str = message \u00b6 A collection of http response codes and their meaning (copied from python requests)","title":"Status Classes"},{"location":"reference/status_classes/#async_spotify.api._response_status","text":"Wraps the status code of a response to give some additional context","title":"async_spotify.api._response_status"},{"location":"reference/status_classes/#async_spotify.api._response_status.ResponseStatus","text":"A response status object that can be checked if a request was ok","title":"ResponseStatus"},{"location":"reference/status_classes/#async_spotify.api._response_status.ResponseStatus.__init__","text":"Create a Response status object that translates the status code to a success and message Parameters: Name Type Description Default status_code int A valid http status code required Source code in async_spotify/api/_response_status.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , status_code : int ): \"\"\" Create a Response status object that translates the status code to a success and message Args: status_code: A valid http status code \"\"\" self . moved = False self . success = False self . error = False if status_code in STATUS_CODES [ \"OK\" ]: self . success = True message : str = STATUS_CODES [ \"OK\" ][ status_code ][ 0 ] elif status_code in STATUS_CODES [ \"REDIRECT\" ]: self . moved = True message : str = STATUS_CODES [ \"REDIRECT\" ][ status_code ][ 0 ] elif status_code in STATUS_CODES [ \"CLIENT_ERROR\" ]: self . error = True message : str = STATUS_CODES [ \"CLIENT_ERROR\" ][ status_code ][ 0 ] elif status_code in STATUS_CODES [ \"SERVER_ERROR\" ]: self . error = True message = STATUS_CODES [ \"SERVER_ERROR\" ][ status_code ][ 0 ] else : self . error = True message : str = \"Unknown response code\" self . code : int = status_code self . message : str = message","title":"__init__()"},{"location":"reference/status_classes/#async_spotify.api._status_codes","text":"A collection of http response codes and their meaning (copied from python requests)","title":"async_spotify.api._status_codes"},{"location":"reference/url/","text":"\u00b6 Collection of spotify api urls replace with str.format(id='test') URLS \u00b6 Collection of spotify api urls ALBUM \u00b6 URLs concerning the album ARTIST \u00b6 URLs concerning the artist BROWSE \u00b6 URLs concerning the browsing of artists and categories EPISODES \u00b6 URLs concerning episodes FOLLOW \u00b6 URLs concerning the follow endpoint LIBRARY \u00b6 URLs concerning the user library PERSONALIZATION \u00b6 URLs to get habits over the user PLAYER \u00b6 URLs concerning the player PLAYLIST \u00b6 URLs concerning the playlists SHOWS \u00b6 URLs concerning shows TRACKS \u00b6 URLs concerning tracks USER \u00b6 URLs concerning a spotify user profile","title":"URLS"},{"location":"reference/url/#async_spotify.api._endpoints.urls","text":"Collection of spotify api urls replace with str.format(id='test')","title":"async_spotify.api._endpoints.urls"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS","text":"Collection of spotify api urls","title":"URLS"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.ALBUM","text":"URLs concerning the album","title":"ALBUM"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.ARTIST","text":"URLs concerning the artist","title":"ARTIST"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.BROWSE","text":"URLs concerning the browsing of artists and categories","title":"BROWSE"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.EPISODES","text":"URLs concerning episodes","title":"EPISODES"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.FOLLOW","text":"URLs concerning the follow endpoint","title":"FOLLOW"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.LIBRARY","text":"URLs concerning the user library","title":"LIBRARY"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.PERSONALIZATION","text":"URLs to get habits over the user","title":"PERSONALIZATION"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.PLAYER","text":"URLs concerning the player","title":"PLAYER"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.PLAYLIST","text":"URLs concerning the playlists","title":"PLAYLIST"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.SHOWS","text":"URLs concerning shows","title":"SHOWS"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.TRACKS","text":"URLs concerning tracks","title":"TRACKS"},{"location":"reference/url/#async_spotify.api._endpoints.urls.URLS.USER","text":"URLs concerning a spotify user profile","title":"USER"}]}